"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const isElInView = (el, ul) => {
    const containerTop = ul.scrollTop;
    const containerBottom = containerTop + ul.offsetHeight;
    const elemTop = el.offsetTop;
    const elemBottom = elemTop + el.offsetHeight;
    return elemBottom <= containerBottom && elemTop >= containerTop;
};
const useArrowKeyDown = ({ results, onEnter, menuRef, }) => {
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const onKeyDown = (0, react_1.useCallback)((e) => {
        if (results.length > 0) {
            if (e.key === "ArrowDown") {
                const newIndex = (activeIndex + 1) % results.length;
                setActiveIndex(newIndex);
                const ul = menuRef.current;
                if (ul) {
                    const el = ul.children[newIndex];
                    if (el && !isElInView(el, ul)) {
                        el.scrollIntoView(false);
                    }
                }
                e.preventDefault();
                e.stopPropagation();
            }
            else if (e.key === "ArrowUp") {
                const newIndex = (activeIndex + results.length - 1) % results.length;
                setActiveIndex(newIndex);
                const ul = menuRef.current;
                if (ul) {
                    const el = ul.children[newIndex];
                    if (el && !isElInView(el, ul)) {
                        el.scrollIntoView(true);
                    }
                }
                e.preventDefault();
                e.stopPropagation();
            }
        }
        if (e.key === "Enter") {
            onEnter(results[activeIndex]);
            setActiveIndex(0);
            e.preventDefault();
            e.stopPropagation();
        }
    }, [activeIndex, setActiveIndex, results, onEnter]);
    return {
        activeIndex,
        onKeyDown,
    };
};
exports.default = useArrowKeyDown;
//# sourceMappingURL=useArrowKeyDown.js.map