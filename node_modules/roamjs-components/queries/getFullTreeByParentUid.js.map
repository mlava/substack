{"version":3,"file":"getFullTreeByParentUid.js","sourceRoot":"","sources":["../../src/queries/getFullTreeByParentUid.ts"],"names":[],"mappings":";;AAEA,MAAM,cAAc,GAAG,CAAC,CAAmB,EAAY,EAAE;;IACvD,IAAI,CAAC,CAAC;QACJ,OAAO;YACL,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,CAAC;YACR,GAAG,EAAE,EAAE;YACP,QAAQ,EAAE,EAAE;YACZ,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,CAAC;YACV,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,KAAK,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE;YACtC,SAAS,EAAE,MAAM;SAClB,CAAC;IACJ,MAAM,QAAQ,GACZ,CAAC,MAAA,MAAA,MAAA,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;SACzB,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,KAAK,QAAQ,CAAC,0CACvD,qBAAqB,CAAC,0CAAE,OAAO,mDAAG,IAAI,EAAE,EAAE,CAAc,KAAI,QAAQ,CAAC;IAC5E,OAAO;QACL,IAAI,EAAE,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI,EAAE;QAClD,IAAI,EAAE,OAAO,CAAC,CAAC,aAAa,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;QACvE,KAAK,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC;QAC7B,GAAG,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE;QAC1B,OAAO,EAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACjC,QAAQ;QACR,QAAQ,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxC,KAAK,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE;QACtC,SAAS,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,MAAM;QAC3C,QAAQ,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;aACnC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;aACnE,GAAG,CAAC,cAAc,CAAC;QACtB,OAAO,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAG,QAAQ,CAAC,KAAI,CAAC,CAAC;KACpE,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,CAAC,GAAW,EAAY,EAAE,CACvD,cAAc,CACZ,MAAM,CAAC,YAAY,CAAC,IAAI,CACtB;;;;;;;;;;;;;MAaA,EACA,CAAC,YAAY,EAAE,GAAG,CAAC,CACpB,CACF,CAAC;AAEJ,kBAAe,sBAAsB,CAAC","sourcesContent":["import type { PullBlock, TreeNode, ViewType } from \"../types\";\n\nconst formatRoamNode = (n: PullBlock | null): TreeNode => {\n  if (!n)\n    return {\n      text: \"\",\n      open: true,\n      order: 0,\n      uid: \"\",\n      children: [],\n      parents: [],\n      heading: 0,\n      viewType: \"bullet\",\n      editTime: new Date(0),\n      props: { imageResize: {}, iframe: {} },\n      textAlign: \"left\",\n    };\n  const viewType =\n    ((n[\":block/parents\"] || [])\n      .find((a) => typeof a[\":children/view-type\"] === \"string\")\n      ?.[\":children/view-type\"]?.replace?.(/^:/, \"\") as ViewType) || \"bullet\";\n  return {\n    text: n[\":block/string\"] || n[\":node/title\"] || \"\",\n    open: typeof n[\":block/open\"] === \"undefined\" ? true : n[\":block/open\"],\n    order: n[\":block/order\"] || 0,\n    uid: n[\":block/uid\"] || \"\",\n    heading: n[\":block/heading\"] || 0,\n    viewType,\n    editTime: new Date(n[\":edit/time\"] || 0),\n    props: { imageResize: {}, iframe: {} },\n    textAlign: n[\":block/text-align\"] || \"left\",\n    children: (n[\":block/children\"] || [])\n      .sort((a, b) => (a[\":block/order\"] || 0) - (b[\":block/order\"] || 0))\n      .map(formatRoamNode),\n    parents: (n[\":block/parents\"] || []).map((n) => n?.[\":db/id\"] || 0),\n  };\n};\n\nconst getFullTreeByParentUid = (uid: string): TreeNode =>\n  formatRoamNode(\n    window.roamAlphaAPI.pull(\n      `[\n      :block/string \n      :node/title \n      :block/uid \n      :block/order \n      :block/heading \n      :block/open \n      :children/view-type\n      :block/text-align\n      :edit/time \n      :block/props\n      {:block/parents [:children/view-type]}\n      {:block/children ...}\n    ]`,\n      [`:block/uid`, uid]\n    )\n  );\n\nexport default getFullTreeByParentUid;\n"]}