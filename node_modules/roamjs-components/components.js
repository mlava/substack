"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_dom_1 = tslib_1.__importDefault(require("react-dom"));
const react_1 = tslib_1.__importStar(require("react"));
const core_1 = require("@blueprintjs/core");
const AutocompleteInput_1 = tslib_1.__importDefault(require("./components/AutocompleteInput"));
const FormDialog_1 = tslib_1.__importDefault(require("./components/FormDialog"));
const PageInput_1 = tslib_1.__importDefault(require("./components/PageInput"));
const Toast_1 = tslib_1.__importDefault(require("./components/Toast"));
const renderOverlay_1 = tslib_1.__importDefault(require("./util/renderOverlay"));
const runExtension_1 = tslib_1.__importDefault(require("./util/runExtension"));
const writes_1 = require("./writes");
const MenuItemSelect_1 = tslib_1.__importDefault(require("./components/MenuItemSelect"));
// const blockRender = (Component: React.FC) => {
//   const block = window.roamAlphaAPI.ui.getFocusedBlock();
//   const parent = document.getElementById(
//     `block-input-${block?.["window-id"]}-${block?.["block-uid"]}`
//   );
//   ReactDOM.render(<Component />, parent);
// };
const unloads = new Set();
const rootRender = (Component) => {
    const root = document.querySelector(".roam-article");
    const parent = document.createElement("div");
    root === null || root === void 0 ? void 0 : root.insertBefore(parent, root.firstElementChild);
    react_dom_1.default.render(react_1.default.createElement(Component, null), parent);
    unloads.add(() => {
        react_dom_1.default.unmountComponentAtNode(parent);
        parent.remove();
    });
};
const components = [
    {
        callback: () => rootRender(() => {
            const [value, setValue] = (0, react_1.useState)("");
            const [filterable, setFilterable] = (0, react_1.useState)(false);
            const options = (0, react_1.useMemo)(() => ["apple", "banana", "orange"], []);
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("div", null,
                    "Chosen value: ",
                    value),
                react_1.default.createElement(core_1.Checkbox, { checked: filterable, onChange: (e) => setFilterable(e.target.checked), label: "Filterable" }),
                react_1.default.createElement(MenuItemSelect_1.default, { activeItem: value, items: options, onItemSelect: (item) => setValue(item), filterable: filterable })));
        }),
        label: "MenuItemSelect",
    },
    {
        callback: () => rootRender(() => {
            const [value, setValue] = (0, react_1.useState)("");
            const [numResults, setNumResults] = (0, react_1.useState)(100);
            const [disabled, setDisabled] = (0, react_1.useState)(false);
            const [maxItemsDisplayed, setMaxItemsDisplayed] = (0, react_1.useState)(0);
            const options = (0, react_1.useMemo)(() => {
                const items = [];
                for (let i = 0; i < numResults; i++) {
                    items.push(Math.random().toString(36).substring(7));
                }
                return items;
            }, [numResults]);
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(core_1.Label, null,
                    "Number of Results",
                    react_1.default.createElement(core_1.NumericInput, { value: numResults, onValueChange: (e) => setNumResults(e), buttonPosition: "none" })),
                react_1.default.createElement(core_1.Label, null,
                    "Max Items Displayed (0 for all)",
                    react_1.default.createElement(core_1.NumericInput, { value: maxItemsDisplayed, onValueChange: (e) => setMaxItemsDisplayed(e), buttonPosition: "none" })),
                react_1.default.createElement(core_1.Label, null,
                    "Chosen value: ",
                    value),
                react_1.default.createElement(core_1.Checkbox, { checked: disabled, onChange: (e) => setDisabled(e.target.checked), label: "Disabled" }),
                react_1.default.createElement(core_1.Label, null,
                    "Autocomplete",
                    react_1.default.createElement(AutocompleteInput_1.default, { disabled: disabled, value: value, setValue: setValue, options: options, maxItemsDisplayed: maxItemsDisplayed === 0 ? undefined : maxItemsDisplayed }))));
        }),
        label: "AutocompleteInput",
    },
    {
        callback: () => rootRender(() => {
            const [isOpen, setIsOpen] = (0, react_1.useState)(false);
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(core_1.Button, { onClick: () => setIsOpen(true), text: "Open Form" }),
                react_1.default.createElement(FormDialog_1.default, { isOpen: isOpen, onClose: () => setIsOpen(false), onSubmit: (data) => window.roamAlphaAPI.ui.mainWindow
                        .getOpenPageOrBlockUid()
                        .then((parentUid) => (0, writes_1.createBlock)({
                        parentUid: parentUid ||
                            window.roamAlphaAPI.util.dateToPageUid(new Date()),
                        node: {
                            text: "Response",
                            children: Object.entries(data).map(([k, v]) => ({
                                text: k,
                                children: Array.isArray(v) ? v : [{ text: `${v}` }],
                            })),
                        },
                    })), fields: {
                        text: { type: "text", label: "Text Field" },
                        number: { type: "number", label: "Number Field" },
                        info: { type: "info", label: "Read Only Info Text" },
                        flag: { type: "flag", label: "Flag Field" },
                        conditionalText: {
                            type: "text",
                            label: "Conditional Text Field",
                            conditional: "flag",
                        },
                        page: { type: "page", label: "Page Field" },
                        block: { type: "block", label: "Block Field" },
                        select: {
                            type: "select",
                            label: "Select Field",
                            options: [
                                "apple",
                                "banana",
                                "orange",
                                "conditional select 1",
                            ],
                        },
                        conditionalSelect: {
                            type: "text",
                            label: "Conditional Text Field",
                            conditional: "select",
                            conditionalValues: ["conditional select 1"],
                        },
                        autocomplete: {
                            type: "autocomplete",
                            label: "Autocomplete Field",
                            options: ["apple", "banana", "orange"],
                        },
                        embed: {
                            type: "embed",
                            label: "Embed Field",
                        },
                    } })));
        }),
        label: "FormDialog",
    },
    {
        callback: () => rootRender(() => {
            const [value, setValue] = (0, react_1.useState)("");
            const [multiline, setMultiline] = (0, react_1.useState)(false);
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(PageInput_1.default, { value: value, setValue: setValue, multiline: multiline }),
                react_1.default.createElement("input", { className: "ml-8 inline-block", checked: multiline, onChange: (e) => setMultiline(e.target.checked), type: "checkbox" })));
        }),
        label: "PageInput",
    },
];
exports.default = (0, runExtension_1.default)((args) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    components.forEach(({ callback, label }) => {
        args.extensionAPI.ui.commandPalette.addCommand({
            label: `Render RoamJS component ${label}`,
            callback,
        });
    });
    window.roamjs.extension.developer = {
        components: {
            AutocompleteInput: AutocompleteInput_1.default,
            FormDialog: FormDialog_1.default,
            PageInput: PageInput_1.default,
            renderToast: Toast_1.default,
        },
        util: {
            renderOverlay: renderOverlay_1.default,
            runExtension: runExtension_1.default,
        },
        args,
    };
    return () => {
        unloads.forEach((unload) => unload());
    };
}));
//# sourceMappingURL=components.js.map