{"version":3,"file":"smartblocks.js","sourceRoot":"","sources":["../../src/types/smartblocks.ts"],"names":[],"mappings":"","sourcesContent":["import { InputTextNode } from \"./native\";\n\ntype CommandOutput = string | string[] | InputTextNode[];\nexport type CommandHandler = (\n  ...args: string[]\n) => CommandOutput | Promise<CommandOutput>;\n\nexport type SmartBlocksContext = {\n  onBlockExit: CommandHandler;\n  targetUid: string;\n  triggerUid: string;\n  ifCommand?: boolean;\n  exitBlock: \"yes\" | \"no\" | \"end\" | \"empty\" | \"childless\";\n  exitWorkflow: boolean;\n  variables: Record<string, string>;\n  cursorPosition?: { uid: string; selection: number };\n  currentUid?: string;\n  currentContent: string;\n  indent: Set<string>;\n  unindent: Set<string>;\n  focusOnBlock?: string;\n  dateBasisMethod?: string;\n  refMapping: Record<string, string>;\n  afterWorkflowMethods: (() => void | Promise<void>)[];\n};\n\nexport type RegisterCommand = (args: {\n  text: string;\n  help?: string;\n  handler: (\n    c: Pick<SmartBlocksContext, \"targetUid\" | \"variables\"> & {\n      proccessBlockText: (s: string) => Promise<InputTextNode[]>;\n      processBlock: (s: InputTextNode) => Promise<InputTextNode[]>;\n    }\n  ) => CommandHandler;\n  delayArgs?: true;\n}) => () => void;\n\nexport type UnregisterCommand = (t: string) => void;\n"]}