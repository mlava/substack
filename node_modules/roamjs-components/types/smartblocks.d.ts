import { InputTextNode } from "./native";
declare type CommandOutput = string | string[] | InputTextNode[];
export declare type CommandHandler = (...args: string[]) => CommandOutput | Promise<CommandOutput>;
export declare type SmartBlocksContext = {
    onBlockExit: CommandHandler;
    targetUid: string;
    triggerUid: string;
    ifCommand?: boolean;
    exitBlock: "yes" | "no" | "end" | "empty" | "childless";
    exitWorkflow: boolean;
    variables: Record<string, string>;
    cursorPosition?: {
        uid: string;
        selection: number;
    };
    currentUid?: string;
    currentContent: string;
    indent: Set<string>;
    unindent: Set<string>;
    focusOnBlock?: string;
    dateBasisMethod?: string;
    refMapping: Record<string, string>;
    afterWorkflowMethods: (() => void | Promise<void>)[];
};
export declare type RegisterCommand = (args: {
    text: string;
    help?: string;
    handler: (c: Pick<SmartBlocksContext, "targetUid" | "variables"> & {
        proccessBlockText: (s: string) => Promise<InputTextNode[]>;
        processBlock: (s: InputTextNode) => Promise<InputTextNode[]>;
    }) => CommandHandler;
    delayArgs?: true;
}) => () => void;
export declare type UnregisterCommand = (t: string) => void;
export {};
