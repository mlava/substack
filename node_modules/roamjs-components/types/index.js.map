{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/types/index.ts"],"names":[],"mappings":";;;AAmBA,mDAAyB","sourcesContent":["import {\n  AddPullWatch,\n  PullBlock,\n  SidebarAction,\n  SidebarWindow,\n  SidebarWindowInput,\n  WriteAction,\n} from \"./native\";\nimport {\n  RunQuery,\n  ListActiveQueries,\n  RunQuerySync,\n  IsDiscourseNode,\n} from \"./query-builder\";\nimport { RegisterCommand, UnregisterCommand } from \"./smartblocks\";\nimport type marked from \"marked\";\nimport type Markdown from \"marked-react\";\nimport type JSZip from \"jszip\";\nimport type cytoscape from \"cytoscape\";\nexport * from \"./native\";\n\nexport type Registry = {\n  elements: HTMLElement[];\n  reactRoots: HTMLElement[];\n  observers: MutationObserver[];\n  domListeners: (\n    | {\n        el: Window;\n        type: keyof WindowEventMap;\n        listener: (\n          this: Window,\n          ev: WindowEventMap[keyof WindowEventMap]\n        ) => void;\n      }\n    | {\n        el: Document;\n        type: keyof DocumentEventMap;\n        listener: (\n          this: Document,\n          ev: DocumentEventMap[keyof DocumentEventMap]\n        ) => void;\n      }\n    | {\n        el: HTMLElement;\n        type: keyof HTMLElementEventMap | `roamjs:${string}`;\n        listener: (\n          this: HTMLElement,\n          ev: HTMLElementEventMap[keyof HTMLElementEventMap]\n        ) => void;\n      }\n  )[];\n  commands: string[];\n  timeouts: { timeout: number }[];\n};\n\ndeclare global {\n  interface Window {\n    // TODO remove\n    RoamLazy?: {\n      JSZip: () => Promise<typeof JSZip>;\n      Marked: () => Promise<typeof marked>;\n      MarkedReact: () => Promise<typeof Markdown>;\n      Cytoscape: () => Promise<typeof cytoscape>;\n      Insect: () => Promise<{\n        // insect uses purescript instead of typescript -.-\n        commands: string[];\n        fmtConsole: (M: unknown) => unknown;\n        fmtJqueryTerminal: (M: unknown) => unknown;\n        fmtPlain: (M: unknown) => unknown;\n        functions: (M: unknown) => unknown;\n        identifiers: (M: unknown) => unknown;\n        initialEnvironment: { values: unknown; functions: unknown };\n        repl: (\n          fmt: (M: unknown) => unknown\n        ) => (env: {\n          values: unknown;\n          functions: unknown;\n        }) => (s: string) => { msg: string };\n      }>;\n    };\n    // END TODO remove\n\n    roamAlphaAPI: {\n      q: (query: string, ...params: unknown[]) => unknown[][];\n      pull: (\n        selector: string,\n        id: number | string | [string, string]\n      ) => PullBlock;\n      createBlock: WriteAction;\n      updateBlock: WriteAction;\n      createPage: WriteAction;\n      moveBlock: WriteAction;\n      deleteBlock: WriteAction;\n      updatePage: WriteAction;\n      deletePage: WriteAction;\n      util: {\n        generateUID: () => string;\n        dateToPageTitle: (date: Date) => string;\n        dateToPageUid: (date: Date) => string;\n        pageTitleToDate: (title: string) => Date | null;\n        uploadFile: (args: { file: File }) => string;\n      };\n      data: {\n        addPullWatch: AddPullWatch;\n        block: {\n          create: WriteAction;\n          update: WriteAction;\n          move: WriteAction;\n          delete: WriteAction;\n        };\n        fast: {\n          q: (query: string, ...params: unknown[]) => unknown[][];\n        };\n        page: {\n          create: WriteAction;\n          update: WriteAction;\n          delete: WriteAction;\n        };\n        pull: (\n          selector: string,\n          id: number | string | [string, string]\n        ) => PullBlock;\n        pull_many: (pattern: string, eid: string[][]) => PullBlock[];\n        q: (query: string, ...params: unknown[]) => unknown[][];\n        removePullWatch: (\n          pullPattern: string,\n          entityId: string,\n          callback?: (before: PullBlock, after: PullBlock) => void\n        ) => boolean;\n        redo: () => void;\n        undo: () => void;\n        user: {\n          upsert: () => void;\n        };\n      };\n      ui: {\n        leftSidebar: {\n          open: () => Promise<void>;\n          close: () => Promise<void>;\n        };\n        rightSidebar: {\n          open: () => Promise<void>;\n          close: () => Promise<void>;\n          getWindows: () => SidebarWindow[];\n          addWindow: SidebarAction;\n          setWindowOrder: (action: {\n            window: SidebarWindowInput & { order: number };\n          }) => Promise<void>;\n          collapseWindow: SidebarAction;\n          pinWindow: SidebarAction;\n          expandWindow: SidebarAction;\n          removeWindow: SidebarAction;\n          unpinWindow: SidebarAction;\n        };\n        commandPalette: {\n          addCommand: (action: {\n            label: string;\n            callback: () => void;\n          }) => Promise<void>;\n          removeCommand: (action: { label: string }) => Promise<void>;\n        };\n        blockContextMenu: {\n          addCommand: (action: {\n            label: string;\n            callback: (props: {\n              \"block-string\": string;\n              \"block-uid\": string;\n              heading: 0 | 1 | 2 | 3 | null;\n              \"page-uid\": string;\n              \"read-only?\": boolean;\n              \"window-id\": string;\n            }) => void;\n          }) => void;\n          removeCommand: (action: { label: string }) => void;\n        };\n        getFocusedBlock: () => null | {\n          \"window-id\": string;\n          \"block-uid\": string;\n        };\n        components: {\n          renderBlock: (args: {\n            uid: string;\n            el: HTMLElement;\n            zoomPath?: boolean;\n          }) => null;\n          renderPage: (args: {\n            uid: string;\n            el: HTMLElement;\n            hideMentions?: boolean;\n          }) => null;\n        };\n        graphView: {\n          wholeGraph: {\n            addCallback: (props: {\n              label: string;\n              callback: (arg: { \"sigma-renderer\": unknown }) => void;\n            }) => any;\n            removeCallback: (props: { label: string }) => void;\n            setExplorePages: (pages: string[]) => void;\n            getExplorePages: () => string[];\n            setMode: (mode: \"Whole Graph\" | \"Explore\") => void;\n          };\n        };\n        mainWindow: {\n          focusFirstBlock: () => Promise<void>;\n          openBlock: (p: { block: { uid: string } }) => Promise<void>;\n          openPage: (p: {\n            page: { uid: string } | { title: string };\n          }) => Promise<void>;\n          getOpenPageOrBlockUid: () => Promise<string | null>;\n          openDailyNotes: () => Promise<void>;\n        };\n        setBlockFocusAndSelection: (a: {\n          location?: { \"block-uid\": string; \"window-id\": string };\n          selection?: { start: number; end?: number };\n        }) => Promise<void>;\n      };\n      platform: {\n        isDesktop: boolean;\n        isIOS: boolean;\n        isMobile: boolean;\n        isMobileApp: boolean;\n        isPC: boolean;\n        isTouchDevice: boolean;\n      };\n      graph: {\n        name: string;\n        type: \"hosted\" | \"offline\";\n        isEncrypted: boolean;\n      };\n    };\n\n    // roamjs namespace should only be used for methods that must be accessed across extension scripts\n    roamjs: {\n      loaded: Set<string>;\n      extension: {\n        queryBuilder?: {\n          runQuery: RunQuery;\n          runQuerySync: RunQuerySync;\n          listActiveQueries: ListActiveQueries;\n          isDiscourseNode: IsDiscourseNode;\n        };\n        smartblocks?: {\n          registerCommand: RegisterCommand;\n          unregisterCommand: UnregisterCommand;\n          triggerSmartblock: (args: {\n            srcName?: string;\n            srcUid?: string;\n            targetName?: string;\n            targetUid?: string;\n            variables?: Record<string, string>;\n          }) => Promise<unknown>;\n        };\n        [id: string]: Record<string, unknown> | undefined;\n      };\n      version: { [id: string]: string };\n      actions: Record<string, number>;\n    };\n  }\n}\n"]}