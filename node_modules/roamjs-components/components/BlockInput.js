"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const getAllBlockUidsAndTexts_1 = tslib_1.__importDefault(require("../queries/getAllBlockUidsAndTexts"));
const useArrowKeyDown_1 = tslib_1.__importDefault(require("../hooks/useArrowKeyDown"));
const searchBlocksByString = (q, blocks) => {
    const regex = new RegExp(q, "i");
    return blocks.filter((a) => regex.test(a.text)).slice(0, 9);
};
const BlockInput = ({ value, setValue, onBlur, onConfirm, getAllBlocks = getAllBlockUidsAndTexts_1.default, autoFocus, }) => {
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    const open = (0, react_1.useCallback)(() => setIsOpen(true), [setIsOpen]);
    const close = (0, react_1.useCallback)(() => setIsOpen(false), [setIsOpen]);
    const allBlocks = (0, react_1.useMemo)(getAllBlocks, []);
    const items = (0, react_1.useMemo)(() => (value && isOpen ? searchBlocksByString(value, allBlocks) : []), [value, allBlocks]);
    const menuRef = (0, react_1.useRef)(null);
    const inputRef = (0, react_1.useRef)(null);
    const { activeIndex, onKeyDown } = (0, useArrowKeyDown_1.default)({
        onEnter: (value) => {
            if (isOpen) {
                setValue(value.text, value.uid);
                close();
            }
            else if (onConfirm) {
                onConfirm();
            }
        },
        results: items,
        menuRef,
    });
    return (react_1.default.createElement(core_1.Popover, { portalClassName: "roamjs-block-input", targetClassName: "roamjs-block-input-target", captureDismiss: true, isOpen: isOpen, onOpened: open, minimal: true, autoFocus: false, enforceFocus: false, position: core_1.PopoverPosition.BOTTOM_LEFT, modifiers: {
            flip: { enabled: false },
            preventOverflow: { enabled: false },
        }, content: react_1.default.createElement(core_1.Menu, { className: "max-h-64 overflow-auto max-w-md", ulRef: menuRef }, items.map((t, i) => (react_1.default.createElement(core_1.MenuItem, { text: t.text, active: activeIndex === i, key: t.uid, multiline: true, onClick: () => {
                var _a;
                setValue(t.text, t.uid);
                close();
                (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            } })))), target: react_1.default.createElement(core_1.InputGroup, { value: value || "", onChange: (e) => {
                setValue(e.target.value);
                setIsOpen(!!e.target.value);
            }, placeholder: "Search for a block", onKeyDown: onKeyDown, onBlur: (e) => {
                var _a, _b;
                if (e.relatedTarget &&
                    !((_b = (_a = e.relatedTarget).closest) === null || _b === void 0 ? void 0 : _b.call(_a, ".roamjs-block-input"))) {
                    close();
                }
                if (onBlur) {
                    onBlur(e.target.value);
                }
            }, inputRef: inputRef, autoFocus: autoFocus }) }));
};
exports.default = BlockInput;
//# sourceMappingURL=BlockInput.js.map