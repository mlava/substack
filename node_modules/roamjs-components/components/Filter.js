"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const fuzzy_1 = tslib_1.__importDefault(require("fuzzy"));
const Filter = ({ data, initialValue, onChange, renderButtonText = (s) => s ? s.toString() : react_1.default.createElement("i", { style: { opacity: 0.5 } }, "(Empty)"), includeHelpMessage = "Only include these values", excludeHelpMessage = "Exclude these values", small, }) => {
    const [isFilterOpen, setIsFilterOpen] = (0, react_1.useState)(false);
    const closeFilter = (0, react_1.useCallback)(() => {
        setIsFilterOpen(false);
    }, [setIsFilterOpen]);
    const initialFiltersValue = (0, react_1.useMemo)(() => ({
        includes: Object.fromEntries(Object.keys(data).map((k) => [
            k,
            new Set(data[k].filter((d) => initialValue && initialValue.includes[k].has(d))),
        ])),
        excludes: Object.fromEntries(Object.keys(data).map((k) => [
            k,
            new Set(data[k].filter((d) => initialValue && initialValue.excludes[k].has(d))),
        ])),
    }), [initialValue, data]);
    const filtersRef = (0, react_1.useRef)(initialFiltersValue);
    const [filters, setFilters] = (0, react_1.useState)(filtersRef.current);
    const [filterSearch, setFilterSearch] = (0, react_1.useState)("");
    const active = Object.keys(filters.includes).some((k) => filters.includes[k].size > 0) ||
        Object.keys(filters.excludes).some((k) => filters.excludes[k].size > 0);
    return (react_1.default.createElement(core_1.Tooltip, { content: "Filters", position: core_1.Position.BOTTOM },
        react_1.default.createElement(core_1.Popover, { target: react_1.default.createElement(core_1.Button, { icon: react_1.default.createElement(core_1.Icon, { icon: "filter", color: active ? "#a82a2a" : "#5c7080" }), onClick: (e) => {
                    e.stopPropagation();
                    setIsFilterOpen(!isFilterOpen);
                }, className: `roamjs-filter ${active ? "roamjs-filter-active" : ""}`, minimal: true, small: small }), content: react_1.default.createElement("div", { style: { maxWidth: 600, maxHeight: 245, overflowY: "scroll" }, onClick: (e) => e.stopPropagation() },
                react_1.default.createElement("div", { style: {
                        display: "flex",
                        flexDirection: "column",
                        width: 500,
                        maxWidth: "90vw",
                        transition: "all 300ms ease-in 0s",
                        padding: 8,
                    } },
                    react_1.default.createElement("div", { className: "flex-h-box" },
                        react_1.default.createElement("div", { style: {
                                flex: "1 1 100%",
                                paddingTop: 4,
                                paddingBottom: 4,
                                paddingLeft: 4,
                            } },
                            react_1.default.createElement("div", null,
                                react_1.default.createElement("strong", null, "Includes"),
                                react_1.default.createElement("span", { style: { marginLeft: 4, fontSize: 12 } }, "Click to Add"),
                                react_1.default.createElement("div", { style: {
                                        padding: "8px 0px",
                                        fontSize: "0.8em",
                                        color: "rgb(167, 182, 194)",
                                    } }, Object.values(filters.includes).every((v) => v.size === 0)
                                    ? includeHelpMessage
                                    : Object.entries(filters.includes).flatMap(([key, col]) => Array.from(col).map((n, i) => (react_1.default.createElement("div", { style: {
                                            position: "relative",
                                            display: "inline-block",
                                        }, key: `${n.toString()}-${i}` },
                                        react_1.default.createElement("div", null,
                                            react_1.default.createElement("button", { className: "bp3-button", style: {
                                                    margin: 4,
                                                    paddingRight: 4,
                                                    cursor: "pointer",
                                                    borderBottomColor: "rgb(92, 112, 128)",
                                                }, onClick: () => {
                                                    filtersRef.current.includes[key].delete(n);
                                                    const filters = Object.assign({}, filtersRef.current);
                                                    setFilters(filters);
                                                    onChange(filters);
                                                } }, renderButtonText(n, key))))))))),
                            react_1.default.createElement("div", { style: { paddingTop: 8 } })),
                        react_1.default.createElement("div", { className: "rm-line", style: { marginTop: 8, marginBottom: 8 } }),
                        react_1.default.createElement("div", { style: {
                                flex: "1 1 100%",
                                paddingTop: 4,
                                paddingBottom: 4,
                                paddingLeft: 8,
                            } },
                            react_1.default.createElement("div", null,
                                react_1.default.createElement("strong", null, "Removes"),
                                react_1.default.createElement("span", { style: { marginLeft: 4, fontSize: 12 } }, "Shift-Click to Add"),
                                react_1.default.createElement("div", { style: {
                                        padding: "8px 0px",
                                        fontSize: "0.8em",
                                        color: "rgb(167, 182, 194)",
                                    } }, Object.values(filters.excludes).every((v) => v.size === 0)
                                    ? excludeHelpMessage
                                    : Object.entries(filters.excludes).flatMap(([key, col]) => Array.from(col).map((n, i) => (react_1.default.createElement("div", { style: {
                                            position: "relative",
                                            display: "inline-block",
                                        }, key: `${n.toString()}-${i}` },
                                        react_1.default.createElement("div", null,
                                            react_1.default.createElement("button", { className: "bp3-button", style: {
                                                    margin: 4,
                                                    paddingRight: 4,
                                                    cursor: "pointer",
                                                    borderBottomColor: "rgb(92, 112, 128)",
                                                }, onClick: () => {
                                                    filtersRef.current.excludes[key].delete(n);
                                                    const filters = Object.assign({}, filtersRef.current);
                                                    setFilters(filters);
                                                    onChange(filters);
                                                } }, renderButtonText(n, key))))))))),
                            react_1.default.createElement("div", { style: { paddingTop: 8 } }))),
                    react_1.default.createElement("div", { className: "rm-line", style: { marginTop: 4, borderColor: "rgb(41, 55, 66)" } }),
                    react_1.default.createElement("input", { placeholder: "Search References", className: "bp3-input bp3-minimal search-input", style: { margin: 8 }, value: filterSearch, onChange: (e) => setFilterSearch(e.target.value) }),
                    react_1.default.createElement("div", { className: "flex-h-box" }, Object.keys(data).map((k, i, all) => (react_1.default.createElement(react_1.default.Fragment, { key: k },
                        react_1.default.createElement("div", { style: {
                                flex: "1 1 100%",
                                paddingTop: 4,
                                paddingBottom: 4,
                                paddingLeft: 4,
                            } }, (filterSearch
                            ? fuzzy_1.default
                                .filter(filterSearch, data[k])
                                .map((s) => s.string)
                            : data[k])
                            .filter((n) => !filters.includes[k].has(n) &&
                            !filters.excludes[k].has(n))
                            .map((n, i) => (react_1.default.createElement("div", { style: {
                                position: "relative",
                                display: "inline-block",
                            }, key: `${n.toString()}-${i}` },
                            react_1.default.createElement("div", null,
                                react_1.default.createElement("button", { className: "bp3-button", style: {
                                        margin: 4,
                                        paddingRight: 4,
                                        cursor: "pointer",
                                        borderBottomColor: "rgb(92, 112, 128)",
                                    }, onClick: (e) => {
                                        if (e.shiftKey)
                                            filtersRef.current.excludes[k].add(n);
                                        else
                                            filtersRef.current.includes[k].add(n);
                                        const filters = Object.assign({}, filtersRef.current);
                                        setFilters(filters);
                                        onChange(filters);
                                    } }, renderButtonText(n, k))))))),
                        i < all.length - 1 && (react_1.default.createElement("div", { className: "rm-line", style: { marginTop: 8, marginBottom: 8 } })))))))), onClose: closeFilter, isOpen: isFilterOpen })));
};
exports.default = Filter;
//# sourceMappingURL=Filter.js.map