"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createComponentRender = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const getUidsFromId_1 = tslib_1.__importDefault(require("../dom/getUidsFromId"));
const getBlockUidFromTarget_1 = tslib_1.__importDefault(require("../dom/getBlockUidFromTarget"));
const renderWithUnmount_1 = tslib_1.__importDefault(require("../util/renderWithUnmount"));
const ComponentContainer = ({ blockId, className, children }) => {
    const [showIcons, setShowIcons] = (0, react_1.useState)(false);
    const appear = (0, react_1.useCallback)(() => setShowIcons(true), [setShowIcons]);
    const disappear = (0, react_1.useCallback)(() => setShowIcons(false), [setShowIcons]);
    const { blockUid, windowId } = (0, getUidsFromId_1.default)(blockId);
    return (react_1.default.createElement("div", { className: className, onMouseOver: appear, onMouseLeave: disappear, style: { position: "relative", width: "fit-content", minWidth: 300 } },
        showIcons && (react_1.default.createElement("div", { className: "roamjs-edit-component absolute top-2 right-2 z-50" }, blockId && (react_1.default.createElement(core_1.Button, { icon: "edit", minimal: true, onClick: () => window.roamAlphaAPI.ui.setBlockFocusAndSelection({
                location: { "block-uid": blockUid, "window-id": windowId },
            }) })))),
        children));
};
const createComponentRender = (Fc, className) => (b, args) => {
    var _a, _b;
    if (b.parentElement) {
        b.parentElement.onmousedown = (e) => e.stopPropagation();
        const blockUid = (0, getBlockUidFromTarget_1.default)(b);
        const possibleBlockId = (_a = b.closest(".roam-block")) === null || _a === void 0 ? void 0 : _a.id;
        const blockId = ((_b = possibleBlockId === null || possibleBlockId === void 0 ? void 0 : possibleBlockId.endsWith) === null || _b === void 0 ? void 0 : _b.call(possibleBlockId, blockUid))
            ? possibleBlockId
            : undefined;
        if (blockUid) {
            (0, renderWithUnmount_1.default)(react_1.default.createElement(ComponentContainer, { blockId: blockId, className: className },
                react_1.default.createElement(Fc, { blockUid: blockUid })), b.parentElement, args);
        }
    }
};
exports.createComponentRender = createComponentRender;
exports.default = ComponentContainer;
//# sourceMappingURL=ComponentContainer.js.map