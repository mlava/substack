"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfigObserver = exports.render = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const react_dom_1 = tslib_1.__importDefault(require("react-dom"));
const createHTMLObserver_1 = tslib_1.__importDefault(require("../dom/createHTMLObserver"));
const createBlock_1 = tslib_1.__importDefault(require("../writes/createBlock"));
const createPage_1 = tslib_1.__importDefault(require("../writes/createPage"));
const getBasicTreeByParentUid_1 = tslib_1.__importDefault(require("../queries/getBasicTreeByParentUid"));
const getPageUidByPageTitle_1 = tslib_1.__importDefault(require("../queries/getPageUidByPageTitle"));
const getShallowTreeByParentUid_1 = tslib_1.__importDefault(require("../queries/getShallowTreeByParentUid"));
const localStorageGet_1 = tslib_1.__importDefault(require("../util/localStorageGet"));
const idToTitle_1 = tslib_1.__importDefault(require("../util/idToTitle"));
const FieldTabs = ({ id, fields, uid, pageUid, order, toggleable, }) => {
    const parentUid = (0, react_1.useMemo)(() => {
        if (/home/i.test(id)) {
            return pageUid;
        }
        if (uid) {
            return uid;
        }
        if (toggleable) {
            return "";
        }
        const newUid = window.roamAlphaAPI.util.generateUID();
        (0, createBlock_1.default)({
            parentUid: pageUid,
            order,
            node: { text: id, uid: newUid },
        });
        return newUid;
    }, [pageUid, uid, id, toggleable]);
    const childUids = Object.fromEntries((0, getShallowTreeByParentUid_1.default)(parentUid).map(({ text, uid }) => [
        text.toLowerCase().trim(),
        uid,
    ]));
    const [selectedTabId, setSelectedTabId] = (0, react_1.useState)(fields.length && typeof toggleable !== "string"
        ? fields[0].title
        : "enabled");
    const onTabsChange = (0, react_1.useCallback)((tabId) => setSelectedTabId(tabId), [setSelectedTabId]);
    return (react_1.default.createElement(core_1.Tabs, { vertical: true, id: `${id}-field-tabs`, onChange: onTabsChange, selectedTabId: selectedTabId, renderActiveTabPanelOnly: true }, fields.map((field, i) => {
        const { Panel, title, defaultValue } = field;
        return (react_1.default.createElement(core_1.Tab, { id: title, key: title, title: (0, idToTitle_1.default)(title), panel: react_1.default.createElement(Panel, Object.assign({}, field, { defaultValue: defaultValue, order: i, parentUid: parentUid, uid: childUids[title.toLowerCase()] })) }));
    })));
};
const ConfigPage = ({ id, config, pageUid, }) => {
    var _a;
    const isLegacy = "tabs" in config;
    const userTabs = isLegacy
        ? config.tabs.filter((t) => t.fields.length || t.toggleable)
        : [{ fields: config, id: "home" }];
    const [selectedTabId, setSelectedTabId] = (0, react_1.useState)((_a = userTabs[0]) === null || _a === void 0 ? void 0 : _a.id);
    const onTabsChange = (0, react_1.useCallback)((tabId) => setSelectedTabId(tabId), [setSelectedTabId]);
    const tree = (0, getBasicTreeByParentUid_1.default)(pageUid);
    // first character trimmed intentionally for the `v` below
    const titleRef = (0, react_1.useRef)(null);
    const experimentalMode = (0, react_1.useMemo)(() => (0, localStorageGet_1.default)("experimental"), []);
    return (react_1.default.createElement(core_1.Card, { style: { color: "#202B33" }, className: "roamjs-config-panel" },
        react_1.default.createElement("div", { style: { display: "flex", justifyContent: "space-between" }, ref: titleRef, tabIndex: -1 },
            react_1.default.createElement("h4", { style: { padding: 4 } },
                (0, idToTitle_1.default)(id),
                " Configuration")),
        react_1.default.createElement("style", null, `.roamjs-config-tabs {\npadding: 4px;\n}`),
        isLegacy ? (react_1.default.createElement(core_1.Tabs, { id: `${id}-config-tabs`, onChange: onTabsChange, selectedTabId: selectedTabId, renderActiveTabPanelOnly: true, className: "roamjs-config-tabs" }, userTabs.map(({ id: tabId, fields, toggleable, development = false, onEnable, onDisable, }, i) => {
            var _a;
            return (react_1.default.createElement(core_1.Tab, { id: tabId, key: tabId, title: (0, idToTitle_1.default)(tabId), disabled: development && !experimentalMode, panel: react_1.default.createElement(FieldTabs, { id: tabId, extensionId: id, fields: fields, uid: ((_a = tree.find((t) => new RegExp(tabId, "i").test(t.text))) === null || _a === void 0 ? void 0 : _a.uid) || "", pageUid: pageUid, order: i, toggleable: toggleable, onEnable: onEnable, onDisable: onDisable }) }));
        }))) : (react_1.default.createElement(FieldTabs, { id: "home", extensionId: id, fields: config, uid: pageUid, pageUid: pageUid, order: 0, toggleable: false }))));
};
// TODO: better nested type discrimination here
const fieldsToChildren = (fields) => fields
    .filter((f) => !!f.defaultValue)
    .map((f) => {
    var _a;
    return ({
        text: f.title,
        children: f.Panel.type === "flag"
            ? []
            : f.Panel.type === "custom"
                ? f.defaultValue || []
                : f.Panel.type === "pages" || f.Panel.type === "multitext"
                    ? (_a = f.defaultValue) === null || _a === void 0 ? void 0 : _a.map((v) => ({ text: v }))
                    : f.Panel.type === "block"
                        ? f.defaultValue
                            ? [f.defaultValue]
                            : []
                        : [{ text: `${f.defaultValue}` }],
    });
});
const createConfigPage = ({ title, config, }) => {
    var _a;
    const homeTab = "tabs" in config
        ? (_a = config.tabs.find((t) => /home/i.test(t.id))) === null || _a === void 0 ? void 0 : _a.fields
        : config;
    const rawTree = [
        ...(homeTab ? fieldsToChildren(homeTab) : []),
        ...("tabs" in config
            ? config.tabs
                .filter((t) => !/home/i.test(t.id) && !t.toggleable && !t.development)
                .map((t) => ({
                text: t.id,
                children: fieldsToChildren(t.fields),
            }))
            : []),
    ];
    return (0, createPage_1.default)({
        title,
        tree: rawTree.length ? rawTree : [{ text: " " }],
    });
};
const render = ({ h, title, pageUid = (0, getPageUidByPageTitle_1.default)(title), config, }) => {
    var _a, _b;
    const uid = (0, getPageUidByPageTitle_1.default)(title);
    const attribute = `data-roamjs-${uid}`;
    const containerParent = (_a = h.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;
    if (containerParent && !containerParent.hasAttribute(attribute)) {
        containerParent.setAttribute(attribute, "true");
        const parent = document.createElement("div");
        const configPageId = title.split("/").slice(-1)[0];
        parent.id = `${configPageId}-config`;
        containerParent.insertBefore(parent, ((_b = h.parentElement) === null || _b === void 0 ? void 0 : _b.nextElementSibling) || null);
        react_dom_1.default.render(react_1.default.createElement(ConfigPage, { id: configPageId, config: config, pageUid: pageUid }), parent);
    }
};
exports.render = render;
const createConfigObserver = ({ title, config, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const pageUid = (0, getPageUidByPageTitle_1.default)(title) ||
        (yield createConfigPage({
            title,
            config,
        }));
    if ("tabs" in config ? !!config.tabs.length : !!config.length) {
        const observer = (0, createHTMLObserver_1.default)({
            className: "rm-title-display",
            tag: "H1",
            callback: (d) => {
                const h = d;
                if (h.innerText === title) {
                    (0, exports.render)({
                        pageUid,
                        config,
                        title,
                        h,
                    });
                }
            },
        });
        return {
            pageUid,
            observer,
        };
    }
    return {
        pageUid,
    };
});
exports.createConfigObserver = createConfigObserver;
exports.default = ConfigPage;
//# sourceMappingURL=ConfigPage.js.map