"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const core_1 = require("@blueprintjs/core");
const createOverlayRender_1 = tslib_1.__importDefault(require("../util/createOverlayRender"));
const createBlock_1 = tslib_1.__importDefault(require("../writes/createBlock"));
const SimpleAlert = (Markdown) => ({ onClose, content, onConfirm, onCancel, externalLink, confirmText = "Ok", dontShowAgain, }) => {
    const alertOnClose = (0, react_1.useCallback)((confirmed) => {
        onClose();
        if (!confirmed && typeof onCancel === "function")
            onCancel();
    }, [onCancel, onClose]);
    const cancelProps = onCancel
        ? {
            cancelButtonText: "Cancel",
            canOutsideClickCancel: true,
            canEscapeKeyCancel: true,
        }
        : {};
    const [checked, setChecked] = (0, react_1.useState)(false);
    const alerOnConfirm = (0, react_1.useCallback)(() => {
        (checked && dontShowAgain
            ? (0, createBlock_1.default)({
                parentUid: dontShowAgain,
                node: { text: "Do not show again" },
            })
            : Promise.resolve()).then(onConfirm);
    }, [onConfirm, checked, dontShowAgain]);
    return (react_1.default.createElement(core_1.Alert, Object.assign({ isOpen: true, onClose: alertOnClose, onConfirm: alerOnConfirm, confirmButtonText: confirmText, 
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        autoFocus: false }, cancelProps),
        react_1.default.createElement("div", { className: core_1.Classes.ALERT_CONTENTS, style: { whiteSpace: "pre-wrap" } },
            react_1.default.createElement(Markdown, { renderer: externalLink
                    ? {
                        link: (href, text) => (react_1.default.createElement("a", { href: href, rel: "noreferrer", target: "_blank" }, text)),
                    }
                    : {} }, content),
            dontShowAgain && (react_1.default.createElement(core_1.Checkbox, { checked: checked, label: "Don't show again", onChange: (e) => setChecked(e.target.checked) })))));
};
const render = (props) => (window.RoamLazy
    ? window.RoamLazy.MarkedReact()
    : Promise.resolve().then(() => tslib_1.__importStar(require("marked-react"))).then((r) => r.default)).then((Markdown) => (0, createOverlayRender_1.default)("simple-alert", SimpleAlert(Markdown))(props));
exports.render = render;
exports.default = SimpleAlert;
//# sourceMappingURL=SimpleAlert.js.map