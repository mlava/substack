"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const core_1 = require("@blueprintjs/core");
const render = (_a) => {
    var { position = "top" } = _a, props = tslib_1.__rest(_a, ["position"]);
    const className = `roamjs-toast-${position}`;
    const toasterRoot = document.querySelector(`.bp3-toast-container.${className}`);
    if (toasterRoot) {
        toasterRoot.dispatchEvent(new CustomEvent("roamjs-toast", { detail: props }));
        return () => toasterRoot.remove();
    }
    else {
        const toaster = core_1.Toaster.create({
            position,
            className,
        });
        // `import(marked-react)` is returning `window.RoamLazy.MarkedReact` instead of the module itself
        (window.RoamLazy
            ? window.RoamLazy.MarkedReact()
            : Promise.resolve().then(() => tslib_1.__importStar(require("marked-react"))).then((r) => r.default)).then((Markdown) => {
            const Toast = ({ content = "RoamJS Notification", intent = core_1.Intent.PRIMARY, timeout = 5000, onDismiss, action, }) => {
                const isStringContent = typeof content === "string";
                return {
                    message: (react_1.default.createElement(react_1.default.Fragment, null,
                        react_1.default.createElement("style", null, `.${className} p { margin-bottom: 0; }`),
                        isStringContent ? react_1.default.createElement(Markdown, null, content) : content)),
                    intent,
                    timeout,
                    onDismiss,
                    action,
                };
            };
            toaster.show(Toast(props), props.id);
            setTimeout(() => {
                const toasterRoot = document.querySelector(`.bp3-toast-container.${className}`);
                if (toasterRoot)
                    toasterRoot.addEventListener("roamjs-toast", ((e) => {
                        const _a = e.detail, { id } = _a, props = tslib_1.__rest(_a, ["id"]);
                        toaster.show(Toast(props), id);
                    }));
            }, 1);
        });
        return () => toaster.dismiss(props.id);
    }
};
exports.render = render;
exports.default = exports.render;
//# sourceMappingURL=Toast.js.map