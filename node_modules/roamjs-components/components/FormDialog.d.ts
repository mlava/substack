import React from "react";
import type { RoamOverlayProps } from "../util/renderOverlay";
import { InputTextNode } from "../types";
declare type Props<T> = {
    title?: React.ReactNode;
    content?: React.ReactNode;
    onSubmit?: (data: T) => Promise<unknown> | unknown;
    submitButtonText?: string;
    cancelButtonText?: string;
    enforceFocus?: boolean;
    fields?: Record<string, ({
        defaultValue?: string;
        type: "text";
    } | {
        defaultValue?: string;
        type: "info";
    } | {
        defaultValue?: number;
        type: "number";
    } | {
        defaultValue?: string;
        type: "select";
        options?: string[];
    } | {
        defaultValue?: string;
        type: "page";
    } | {
        defaultValue?: string;
        type: "block";
    } | {
        defaultValue?: string;
        type: "autocomplete";
        options?: string[];
    } | {
        defaultValue?: boolean;
        type: "flag";
    } | {
        defaultValue?: InputTextNode[];
        type: "embed";
    }) & {
        label?: string;
        conditional?: string;
        conditionalValues?: string[];
    }>;
};
declare const FormDialog: <T extends Record<string, unknown>>({ title, content, isOpen, onClose, onSubmit, fields, submitButtonText, cancelButtonText, enforceFocus, }: RoamOverlayProps<Props<T>>) => JSX.Element;
export declare const render: (props: Props<Record<string, unknown>>) => (() => void) | undefined;
export declare const prompt: ({ defaultAnswer, question, title, }: {
    title: string;
    question: string;
    defaultAnswer: string;
}) => Promise<string>;
export default FormDialog;
