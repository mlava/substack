{"version":3,"file":"MenuItemSelect.js","sourceRoot":"","sources":["../../src/components/MenuItemSelect.tsx"],"names":[],"mappings":";;;AAAA,4CAAmE;AACnE,gDAA0D;AAC1D,0DAAyC;AAEzC,MAAM,cAAc,GAAG,CACrB,KAE0E,EAC7D,EAAE;IACf,MAAM,UAAU,GAAG,eAAM,CAAC,MAAM,EAAK,CAAC;IACtC,MAAM,aAAa,GAAG,CAAC,KAAa,EAAE,IAAO,EAAE,EAAE;QAC/C,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACpE,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;IAClE,CAAC,CAAC;IACF,MAAM,EAAE,UAAU,EAAE,UAAU,GAAG,KAAK,KAAqB,KAAK,EAArB,WAAW,kBAAK,KAAK,EAA1D,4BAAkD,CAAQ,CAAC;IACjE,OAAO,CACL,8BAAC,UAAU,oBACL,WAAW,IACf,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAClD,8BAAC,eAAQ,IACP,GAAG,EAAE,IAAI,EACT,IAAI,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAC5D,MAAM,EAAE,SAAS,CAAC,MAAM,EACxB,OAAO,EAAE,WAAW,GACpB,CACH,EACD,UAAU,EAAE,UAAU,EACtB,aAAa,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,EAC3D,YAAY,kBACV,OAAO,EAAE,IAAI,EACb,cAAc,EAAE,IAAI,IACjB,KAAK,CAAC,YAAY;QAGvB,8BAAC,aAAM,kBACL,IAAI,EACF,UAAU,CAAC,CAAC,CAAC,CACX,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CACpB,KAAK,CAAC,aAAa,CAAC,UAAe,CAAC,CACrC,CAAC,CAAC,CAAC,CACF,UAAU,CACX,CACF,CAAC,CAAC,CAAC,CACF,qCAAG,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,IACvB,KAAK,CAAC,cAAc,IAAI,WAAW,CAClC,CACL,EAEH,SAAS,EAAC,uBAAuB,IAC7B,KAAK,CAAC,WAAW,EACrB,CACS,CACd,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,cAAc,CAAC","sourcesContent":["import { Button, IButtonProps, MenuItem } from \"@blueprintjs/core\";\nimport { SelectProps, Select } from \"@blueprintjs/select\";\nimport React, { ReactText } from \"react\";\n\nconst MenuItemSelect = <T extends ReactText>(\n  props: Omit<SelectProps<T>, \"itemRenderer\"> & {\n    ButtonProps?: IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>;\n  } & { emptyValueText?: string; transformItem?: (s: T) => React.ReactNode }\n): JSX.Element => {\n  const TypeSelect = Select.ofType<T>();\n  const itemPredicate = (query: string, item: T) => {\n    const text = props.transformItem ? props.transformItem(item) : item;\n    return String(text).toLowerCase().includes(query.toLowerCase());\n  };\n  const { activeItem, filterable = false, ...selectProps } = props;\n  return (\n    <TypeSelect\n      {...selectProps}\n      itemRenderer={(item, { modifiers, handleClick }) => (\n        <MenuItem\n          key={item}\n          text={props.transformItem ? props.transformItem(item) : item}\n          active={modifiers.active}\n          onClick={handleClick}\n        />\n      )}\n      filterable={filterable}\n      itemPredicate={props.filterable ? itemPredicate : undefined}\n      popoverProps={{\n        minimal: true,\n        captureDismiss: true,\n        ...props.popoverProps,\n      }}\n    >\n      <Button\n        text={\n          activeItem ? (\n            props.transformItem ? (\n              props.transformItem(activeItem as T)\n            ) : (\n              activeItem\n            )\n          ) : (\n            <i style={{ opacity: 0.5 }}>\n              {props.emptyValueText || \"Choose...\"}\n            </i>\n          )\n        }\n        rightIcon=\"double-caret-vertical\"\n        {...props.ButtonProps}\n      />\n    </TypeSelect>\n  );\n};\n\nexport default MenuItemSelect;\n"]}