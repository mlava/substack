"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const createBlock_1 = tslib_1.__importDefault(require("../writes/createBlock"));
const getBasicTreeByParentUid_1 = tslib_1.__importDefault(require("../queries/getBasicTreeByParentUid"));
const idToTitle_1 = tslib_1.__importDefault(require("../util/idToTitle"));
const nanoid_1 = tslib_1.__importDefault(require("nanoid"));
const crypto_js_1 = tslib_1.__importDefault(require("crypto-js"));
const localStorageGet_1 = tslib_1.__importDefault(require("../util/localStorageGet"));
const localStorageSet_1 = tslib_1.__importDefault(require("../util/localStorageSet"));
const apiPost_1 = tslib_1.__importDefault(require("../util/apiPost"));
const getTargetOrigin = () => {
    try {
        // This is for debugging purposes - should probably remove
        return process.env.CUSTOM_ROAMJS_ORIGIN;
    }
    catch (_a) {
        return "https://roamjs.com";
    }
};
const ExternalLogin = ({ onSuccess, useLocal, parentUid, service, getPopoutUrl, getAuthData, ServiceIcon, loggedIn = false, }) => {
    const targetOrigin = getTargetOrigin();
    const [loading, setLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)("");
    const onClick = (0, react_1.useCallback)(() => {
        const otp = (0, nanoid_1.default)().replace(/_/g, "-");
        const key = (0, nanoid_1.default)().replace(/_/g, "-");
        const state = `${service}_${otp}_${key}`;
        setLoading(true);
        getPopoutUrl(state)
            .then((url) => {
            const width = 600;
            const height = 525;
            const left = window.screenX + (window.innerWidth - width) / 2;
            const top = window.screenY + (window.innerHeight - height) / 2;
            const loginWindow = window.open(`${url}&state=${state}`, `roamjs:${service}:login`, `left=${left},top=${top},width=${width},height=${height},status=1`);
            let intervalListener = 0;
            const processAuthData = (data) => {
                var _a;
                (_a = loginWindow === null || loginWindow === void 0 ? void 0 : loginWindow.close) === null || _a === void 0 ? void 0 : _a.call(loginWindow);
                getAuthData(data)
                    .then((rr) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    var _b;
                    const labelUid = window.roamAlphaAPI.util.generateUID();
                    const { label = "Default Account" } = rr, rawData = tslib_1.__rest(rr, ["label"]);
                    const oauthData = JSON.stringify(rawData);
                    const account = {
                        text: label,
                        uid: labelUid,
                        data: oauthData,
                        time: new Date().valueOf(),
                    };
                    if (useLocal) {
                        const key = `oauth-${service}`;
                        const accounts = JSON.parse((0, localStorageGet_1.default)(key) || "[]");
                        (0, localStorageSet_1.default)(key, JSON.stringify([...accounts, account]));
                    }
                    else {
                        const existingTree = (0, getBasicTreeByParentUid_1.default)(parentUid).find((t) => /oauth/i.test(t.text));
                        const blockUid = (existingTree === null || existingTree === void 0 ? void 0 : existingTree.uid) ||
                            (yield (0, createBlock_1.default)({ node: { text: "oauth" }, parentUid }));
                        window.roamAlphaAPI.createBlock({
                            block: { string: label, uid: labelUid },
                            location: {
                                "parent-uid": blockUid,
                                order: ((_b = existingTree === null || existingTree === void 0 ? void 0 : existingTree.children) === null || _b === void 0 ? void 0 : _b.length) || 0,
                            },
                        });
                        const valueUid = window.roamAlphaAPI.util.generateUID();
                        const block = {
                            string: oauthData,
                            uid: valueUid,
                        };
                        window.roamAlphaAPI.createBlock({
                            location: { "parent-uid": labelUid, order: 0 },
                            block,
                        });
                        window.roamAlphaAPI.updateBlock({
                            block: { open: false, string: "oauth", uid: blockUid },
                        });
                    }
                    onSuccess(account);
                }))
                    .finally(() => {
                    window.removeEventListener("message", messageEventListener);
                    window.clearTimeout(intervalListener);
                    setLoading(false);
                });
            };
            const messageEventListener = (e) => {
                if (e.origin === targetOrigin && loginWindow) {
                    processAuthData(e.data);
                }
            };
            const authInterval = () => {
                (0, apiPost_1.default)({
                    path: "auth",
                    data: {
                        service,
                        otp,
                    },
                    anonymous: true,
                })
                    .then((r) => {
                    if (r.auth) {
                        const auth = crypto_js_1.default.AES.decrypt(r.auth, key).toString(crypto_js_1.default.enc.Utf8);
                        processAuthData(auth);
                    }
                    else {
                        intervalListener = window.setTimeout(authInterval, 1000);
                    }
                })
                    .catch((e) => {
                    var _a;
                    if (((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) !== 400) {
                        intervalListener = window.setTimeout(authInterval, 1000);
                    }
                });
            };
            authInterval();
            window.addEventListener("message", messageEventListener);
        })
            .catch((e) => {
            setError(e.message);
            setLoading(false);
        });
    }, [onSuccess, parentUid, setLoading, setError]);
    return (react_1.default.createElement("div", { style: { display: "flex" } },
        react_1.default.createElement(core_1.Button, { icon: react_1.default.createElement(core_1.Icon, { icon: react_1.default.createElement(ServiceIcon, { style: {
                        width: 15,
                        height: 15,
                        marginLeft: 4,
                        cursor: "pointer",
                    } }) }), onClick: onClick, disabled: loading, className: "roamjs-external-login", rightIcon: loading && react_1.default.createElement(core_1.Spinner, { size: core_1.Spinner.SIZE_SMALL }) }, loggedIn
            ? `Add Another ${(0, idToTitle_1.default)(service)} Account`
            : `Login With ${(0, idToTitle_1.default)(service)}`),
        error && (react_1.default.createElement("div", { style: { color: "red", whiteSpace: "pre-line" } }, error))));
};
exports.default = ExternalLogin;
//# sourceMappingURL=ExternalLogin.js.map