"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const getShallowTreeByParentUid_1 = tslib_1.__importDefault(require("../../queries/getShallowTreeByParentUid"));
const idToTitle_1 = tslib_1.__importDefault(require("../../util/idToTitle"));
const Description_1 = tslib_1.__importDefault(require("../Description"));
const MultiChildPanel = ({ uid: initialUid, title, description, order, parentUid, InputComponent, }) => {
    const [uid, setUid] = (0, react_1.useState)(initialUid);
    const [texts, setTexts] = (0, react_1.useState)(() => uid ? (0, getShallowTreeByParentUid_1.default)(uid) : []);
    const [value, setValue] = (0, react_1.useState)("");
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(core_1.Label, null,
            (0, idToTitle_1.default)(title),
            react_1.default.createElement(Description_1.default, { description: description }),
            react_1.default.createElement("div", { style: { display: "flex" } },
                react_1.default.createElement(InputComponent, { value: value, setValue: setValue }),
                react_1.default.createElement(core_1.Button, { icon: "plus", minimal: true, disabled: !value, onClick: () => {
                        const valueUid = window.roamAlphaAPI.util.generateUID();
                        if (uid) {
                            window.roamAlphaAPI.createBlock({
                                location: { "parent-uid": uid, order: texts.length },
                                block: { string: value, uid: valueUid },
                            });
                        }
                        else {
                            const newUid = window.roamAlphaAPI.util.generateUID();
                            window.roamAlphaAPI.createBlock({
                                block: { string: title, uid: newUid },
                                location: { order, "parent-uid": parentUid },
                            });
                            setTimeout(() => setUid(newUid));
                            window.roamAlphaAPI.createBlock({
                                block: { string: value, uid: valueUid },
                                location: { order: 0, "parent-uid": newUid },
                            });
                        }
                        setTexts([...texts, { text: value, uid: valueUid }]);
                        setValue("");
                    } }))),
        texts.map((p) => (react_1.default.createElement("div", { key: p.uid, style: {
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
            } },
            react_1.default.createElement("span", { style: {
                    textOverflow: "ellipsis",
                    whiteSpace: "nowrap",
                    overflow: "hidden",
                } }, p.text),
            react_1.default.createElement(core_1.Button, { icon: "trash", minimal: true, onClick: () => {
                    window.roamAlphaAPI.deleteBlock({ block: { uid: p.uid } });
                    setTexts(texts.filter((f) => f.uid !== p.uid));
                } }))))));
};
MultiChildPanel.type = "custom";
exports.default = MultiChildPanel;
//# sourceMappingURL=MultiChildPanel.js.map