import React from "react";
import type { InputTextNode } from "../../types/native";
import type { ExternalLoginOptions } from "../ExternalLogin";
export declare type OauthField = {
    type: "oauth";
    defaultValue?: [];
    options: ExternalLoginOptions;
};
export declare type FieldPanel<T extends UnionField, U = Record<string, unknown>> = ((props: {
    order: number;
    uid?: string;
    parentUid: string;
} & Omit<Field<T>, "Panel"> & U) => React.ReactElement) & {
    type: T["type"];
};
export declare type TextField = {
    type: "text";
    defaultValue?: string;
    options?: {
        placeholder?: string;
        onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    };
};
export declare type TimeField = {
    type: "time";
    defaultValue?: Date;
};
export declare type NumberField = {
    type: "number";
    defaultValue?: number;
};
export declare type FlagField = {
    type: "flag";
    defaultValue?: boolean;
    options?: {
        onChange?: (f: boolean, e: React.FormEvent<HTMLInputElement>) => void;
    };
};
export declare type MultiTextField = {
    type: "multitext";
    defaultValue?: string[];
    options?: {
        placeholder?: string;
    };
};
export declare type PagesField = {
    type: "pages";
    defaultValue?: string[];
};
export declare type SelectField = {
    type: "select";
    defaultValue?: string;
    options: {
        items: string[] | (() => string[]);
    };
};
export declare type BlockField = {
    type: "block";
    defaultValue?: InputTextNode;
};
export declare type BlocksField = {
    type: "blocks";
    defaultValue?: InputTextNode[];
};
export declare type CustomField = {
    type: "custom";
    defaultValue?: InputTextNode[];
    options: {
        component: React.FC<{
            parentUid: string;
            uid: string;
            defaultValue: InputTextNode[];
            title: string;
        }>;
    };
};
export declare type ArrayField = PagesField | MultiTextField | CustomField | BlocksField;
export declare type UnionField = ArrayField | TextField | TimeField | NumberField | OauthField | FlagField | SelectField | BlockField;
export declare type Field<T extends UnionField> = Omit<T, "type"> & {
    title: string;
    description: string;
    Panel: FieldPanel<T>;
};
