"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const getBasicTreeByParentUid_1 = tslib_1.__importDefault(require("../../queries/getBasicTreeByParentUid"));
const getShallowTreeByParentUid_1 = tslib_1.__importDefault(require("../../queries/getShallowTreeByParentUid"));
const localStorageGet_1 = tslib_1.__importDefault(require("../../util/localStorageGet"));
const localStorageRemove_1 = tslib_1.__importDefault(require("../../util/localStorageRemove"));
const localStorageSet_1 = require("../../util/localStorageSet");
const deleteBlock_1 = tslib_1.__importDefault(require("../../writes/deleteBlock"));
const Description_1 = tslib_1.__importDefault(require("../Description"));
const ExternalLogin_1 = tslib_1.__importDefault(require("../ExternalLogin"));
const OauthPanel = ({ uid, parentUid, options }) => {
    const key = `oauth-${options.service}`;
    const [useLocal, setUseLocal] = (0, react_1.useState)(!!(0, localStorageGet_1.default)(key));
    const [accounts, setAccounts] = (0, react_1.useState)(() => useLocal
        ? JSON.parse((0, localStorageGet_1.default)(key))
        : uid
            ? (0, getBasicTreeByParentUid_1.default)(uid).map((v) => {
                var _a, _b;
                return ({
                    text: ((_a = v.children[0]) === null || _a === void 0 ? void 0 : _a.text) ? v.text : "Default Account",
                    uid: v.uid,
                    data: ((_b = v.children[0]) === null || _b === void 0 ? void 0 : _b.text) || v.text,
                });
            })
            : []);
    const onCheck = (0, react_1.useCallback)((e) => {
        const checked = e.target.checked;
        setUseLocal(checked);
        if (checked) {
            if (uid) {
                (0, getShallowTreeByParentUid_1.default)(uid).forEach(({ uid: u }) => (0, deleteBlock_1.default)(u));
            }
            (0, localStorageSet_1.localStorageSet)(key, JSON.stringify(accounts));
        }
        else {
            (0, localStorageRemove_1.default)(key);
            if (uid) {
                accounts.forEach(({ text, uid: u, data }, order) => {
                    window.roamAlphaAPI.createBlock({
                        location: { "parent-uid": uid, order },
                        block: { string: text, uid: u },
                    });
                    window.roamAlphaAPI.createBlock({
                        location: { "parent-uid": u, order: 0 },
                        block: { string: data },
                    });
                });
            }
        }
    }, [setUseLocal, accounts, uid, key]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(core_1.Checkbox, { labelElement: react_1.default.createElement(react_1.default.Fragment, null,
                "Store Locally",
                react_1.default.createElement(Description_1.default, { description: "If checked, sensitive authentication data will be stored locally on your machine and will require re-logging in per device. If unchecked, sensitive authentication data will be stored in your Roam Graph." })), checked: useLocal, onChange: onCheck }),
        react_1.default.createElement(ExternalLogin_1.default, Object.assign({ useLocal: useLocal, onSuccess: (acc) => setAccounts([...accounts, acc]), parentUid: parentUid, loggedIn: !!accounts.length }, options)),
        !!accounts.length && (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("h5", { style: { marginTop: 8 } }, "Accounts"),
            react_1.default.createElement("hr", null),
            react_1.default.createElement("ul", { style: { marginTop: 8, padding: 0 } }, accounts.map((act) => (react_1.default.createElement("li", { key: act.uid, style: {
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    marginTop: 8,
                } },
                react_1.default.createElement("span", { style: { minWidth: 192 } }, act.text),
                react_1.default.createElement(core_1.Button, { text: "Log Out", onClick: () => {
                        if (useLocal) {
                            const accts = JSON.parse((0, localStorageGet_1.default)(key));
                            (0, localStorageSet_1.localStorageSet)(key, JSON.stringify(accts.filter((a) => act.uid !== a.uid)));
                        }
                        else {
                            (0, deleteBlock_1.default)(act.uid);
                        }
                        setAccounts(accounts.filter((a) => act.uid !== a.uid));
                    } })))))))));
};
OauthPanel.type = "oauth";
exports.default = OauthPanel;
//# sourceMappingURL=OauthPanel.js.map