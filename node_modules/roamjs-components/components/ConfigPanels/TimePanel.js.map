{"version":3,"file":"TimePanel.js","sourceRoot":"","sources":["../../../src/components/ConfigPanels/TimePanel.tsx"],"names":[],"mappings":";;;AAAA,4CAA0C;AAC1C,oDAAmD;AACnD,qEAAqC;AACrC,6EAA6C;AAC7C,0DAA0B;AAC1B,6EAA6C;AAC7C,yEAAyC;AAEzC,wFAAwD;AAExD,MAAM,SAAS,GAA0B,CAAC,EACxC,KAAK,EACL,GAAG,EACH,SAAS,EACT,KAAK,EACL,WAAW,EACX,YAAY,GAAG,IAAA,oBAAU,EAAC,IAAI,IAAI,EAAE,CAAC,GACtC,EAAE,EAAE;IACH,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAA,6BAAmB,EAAC;QAC9C,YAAY;QACZ,KAAK;QACL,GAAG;QACH,SAAS;QACT,KAAK;QACL,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE;YACf,MAAM,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;YACrB,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAC1B,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YAC9B,OAAO,CAAC,CAAC;QACX,CAAC;QACD,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,gBAAM,EAAC,CAAC,EAAE,OAAO,CAAC;KACjC,CAAC,CAAC;IACH,OAAO,CACL,8BAAC,YAAK;QACH,IAAA,mBAAS,EAAC,KAAK,CAAC;QACjB,8BAAC,qBAAW,IAAC,WAAW,EAAE,WAAW,GAAI;QACzC,8BAAC,qBAAU,IAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,SAAG,CAC3D,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC;AAExB,kBAAe,SAAS,CAAC","sourcesContent":["import { Label } from \"@blueprintjs/core\";\nimport { TimePicker } from \"@blueprintjs/datetime\";\nimport format from \"date-fns/format\";\nimport startOfDay from \"date-fns/startOfDay\";\nimport React from \"react\";\nimport idToTitle from \"../../util/idToTitle\";\nimport Description from \"../Description\";\nimport type { FieldPanel, TimeField } from \"./types\";\nimport useSingleChildValue from \"./useSingleChildValue\";\n\nconst TimePanel: FieldPanel<TimeField> = ({\n  title,\n  uid,\n  parentUid,\n  order,\n  description,\n  defaultValue = startOfDay(new Date()),\n}) => {\n  const { value, onChange } = useSingleChildValue({\n    defaultValue,\n    title,\n    uid,\n    parentUid,\n    order,\n    transform: (s) => {\n      const d = new Date();\n      const [hours, minutes] = s.split(\":\");\n      d.setHours(Number(hours));\n      d.setMinutes(Number(minutes));\n      return d;\n    },\n    toStr: (v) => format(v, \"HH:mm\"),\n  });\n  return (\n    <Label>\n      {idToTitle(title)}\n      <Description description={description} />\n      <TimePicker value={value} onChange={onChange} showArrowButtons />\n    </Label>\n  );\n};\n\nTimePanel.type = \"time\";\n\nexport default TimePanel;\n"]}