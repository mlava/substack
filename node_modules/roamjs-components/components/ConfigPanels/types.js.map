{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/components/ConfigPanels/types.ts"],"names":[],"mappings":"","sourcesContent":["import React from \"react\";\nimport type { InputTextNode } from \"../../types/native\";\nimport type { ExternalLoginOptions } from \"../ExternalLogin\";\n\nexport type OauthField = {\n  type: \"oauth\";\n  defaultValue?: [];\n  options: ExternalLoginOptions;\n};\n\nexport type FieldPanel<T extends UnionField, U = Record<string, unknown>> = ((\n  props: {\n    order: number;\n    uid?: string;\n    parentUid: string;\n  } & Omit<Field<T>, \"Panel\"> &\n    U\n) => React.ReactElement) & { type: T[\"type\"] };\n\nexport type TextField = {\n  type: \"text\";\n  defaultValue?: string;\n  options?: {\n    placeholder?: string;\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void\n  };\n};\n\nexport type TimeField = {\n  type: \"time\";\n  defaultValue?: Date;\n};\n\nexport type NumberField = {\n  type: \"number\";\n  defaultValue?: number;\n};\n\nexport type FlagField = {\n  type: \"flag\";\n  defaultValue?: boolean;\n  options?: {\n    onChange?: (f: boolean, e: React.FormEvent<HTMLInputElement>) => void;\n  };\n};\n\nexport type MultiTextField = {\n  type: \"multitext\";\n  defaultValue?: string[];\n  options?: {\n    placeholder?: string;\n  };\n};\n\nexport type PagesField = {\n  type: \"pages\";\n  defaultValue?: string[];\n};\n\nexport type SelectField = {\n  type: \"select\";\n  defaultValue?: string;\n  options: {\n    items: string[] | (() => string[]);\n  };\n};\n\nexport type BlockField = {\n  type: \"block\";\n  defaultValue?: InputTextNode;\n};\n\nexport type BlocksField = {\n  type: \"blocks\";\n  defaultValue?: InputTextNode[];\n};\n\nexport type CustomField = {\n  type: \"custom\";\n  defaultValue?: InputTextNode[];\n  options: {\n    component: React.FC<{\n      parentUid: string;\n      uid: string;\n      defaultValue: InputTextNode[];\n      title: string;\n    }>;\n  };\n};\n\nexport type ArrayField =\n  | PagesField\n  | MultiTextField\n  | CustomField\n  | BlocksField;\nexport type UnionField =\n  | ArrayField\n  | TextField\n  | TimeField\n  | NumberField\n  | OauthField\n  | FlagField\n  | SelectField\n  | BlockField;\n\nexport type Field<T extends UnionField> = Omit<T, \"type\"> & {\n  title: string;\n  description: string;\n  Panel: FieldPanel<T>;\n};\n"]}