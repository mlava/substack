import type marked from "marked";
export declare type RoamContext = {
    pagesToHrefs?: (page: string, uid?: string) => string;
    components?: (c: string, ac?: string) => string | false;
    blockReferences?: (ref: string) => {
        text: string;
        page: string;
    };
    marked: {
        parseInline: (s: string) => string;
        lastSrc: string;
        used: boolean;
        lexInline: typeof marked.marked.Lexer.lexInline;
    };
};
export declare const getInlineLexer: () => Promise<(text: string, ctxt?: Omit<RoamContext, "marked">) => marked.marked.Token[]>;
export declare const getLexer: () => Promise<(text: string, ctxt?: Omit<RoamContext, "marked">) => marked.marked.TokensList>;
export declare const getParseInline: () => Promise<(text: string, ctxt?: Omit<RoamContext, "marked">) => string>;
export declare const getParse: () => Promise<(text: string, ctxt?: Omit<RoamContext, "marked">) => string>;
export declare const inlineLexer: (text: string, ctxt?: Omit<RoamContext, "marked">) => Promise<marked.marked.Token[]>;
export declare const lexer: (text: string, ctxt?: Omit<RoamContext, "marked">) => Promise<marked.marked.TokensList>;
export declare const parseInline: (text: string, ctxt?: Omit<RoamContext, "marked">) => Promise<string>;
export declare const parse: (text: string, ctxt?: Omit<RoamContext, "marked">) => Promise<string>;
declare const _default: (text: string, ctxt?: Omit<RoamContext, "marked"> | undefined) => Promise<string>;
export default _default;
