{"version":3,"file":"getSettingIntFromTree.js","sourceRoot":"","sources":["../../src/util/getSettingIntFromTree.ts"],"names":[],"mappings":";;;AACA,wEAAwC;AAExC,MAAM,qBAAqB,GAAG,CAAC,EAC7B,IAAI,EACJ,GAAG,EACH,YAAY,GAAG,CAAC,GAKjB,EAAU,EAAE;;IACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,qBAAW,EAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACpE,MAAM,KAAK,GAAG,CAAA,MAAA,MAAA,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,0CAAG,CAAC,CAAC,0CAAE,IAAI,0CAAE,IAAI,kDAAI,KAAI,EAAE,CAAC;IACxD,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACvE,CAAC,CAAC;AAEF,kBAAe,qBAAqB,CAAC","sourcesContent":["import type { InputTextNode } from \"../types\";\nimport toFlexRegex from \"./toFlexRegex\";\n\nconst getSettingIntFromTree = ({\n  tree,\n  key,\n  defaultValue = 0,\n}: {\n  tree: InputTextNode[];\n  key: string;\n  defaultValue?: number;\n}): number => {\n  const node = tree.find((s) => toFlexRegex(key).test(s.text.trim()));\n  const value = node?.children?.[0]?.text?.trim?.() || \"\";\n  return !value || isNaN(Number(value)) ? defaultValue : Number(value);\n};\n\nexport default getSettingIntFromTree;\n"]}