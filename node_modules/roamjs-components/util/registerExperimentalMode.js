"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Toast_1 = require("../components/Toast");
const SimpleAlert_1 = require("../components/SimpleAlert");
const localStorageRemove_1 = tslib_1.__importDefault(require("./localStorageRemove"));
const localStorageSet_1 = tslib_1.__importDefault(require("./localStorageSet"));
const localStorageGet_1 = tslib_1.__importDefault(require("./localStorageGet"));
const registerExperimentalMode = ({ feature, onEnable, onDisable, }) => {
    const label = feature
        ? `RoamJS Experiment: ${feature}`
        : "RoamJS Experimental Mode";
    const key = feature
        ? `experimental-${feature.toLowerCase().replace(/ /g, "-")}`
        : "experimental";
    const toggleExperimentalModeFeatures = (experimentalOverlayMode, isInitial) => {
        if (experimentalOverlayMode) {
            onEnable(isInitial);
            window.roamAlphaAPI.ui.commandPalette.addCommand({
                label: `Disable ${label}`,
                callback: () => {
                    (0, localStorageRemove_1.default)(key);
                    toggleExperimentalModeFeatures(false, false);
                    (0, Toast_1.render)({
                        id: "experimental",
                        content: `Disabled ${label}`,
                    });
                },
            });
            window.roamAlphaAPI.ui.commandPalette.removeCommand({
                label: `Enable ${label}`,
            });
        }
        else {
            onDisable(isInitial);
            window.roamAlphaAPI.ui.commandPalette.addCommand({
                label: `Enable ${label}`,
                callback: () => {
                    (0, SimpleAlert_1.render)({
                        content: `WARNING! Experimental features are not meant for public use for most users. Enabling has a higher likelihood of unintended consequences affecting your graph.

Are you sure you want to enable the experimental ${feature
                            ? `RoamJS feature: ${feature}`
                            : "features of RoamJS extensions"}?`,
                        onConfirm: () => {
                            (0, localStorageSet_1.default)(key, "true");
                            toggleExperimentalModeFeatures(true, false);
                            (0, Toast_1.render)({
                                id: "experimental",
                                content: `Enabled ${label}`,
                            });
                        },
                        onCancel: true,
                    });
                },
            });
            window.roamAlphaAPI.ui.commandPalette.removeCommand({
                label: `Disable ${label}`,
            });
        }
    };
    toggleExperimentalModeFeatures((0, localStorageGet_1.default)(key) === "true", true);
    return label;
};
exports.default = registerExperimentalMode;
//# sourceMappingURL=registerExperimentalMode.js.map