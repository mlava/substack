{"version":3,"file":"setInputSettings.js","sourceRoot":"","sources":["../../src/util/setInputSettings.ts"],"names":[],"mappings":";;;;AAAA,yGAAyE;AACzE,gFAAgD;AAChD,gFAAgD;AAChD,wEAAwC;AAEjC,MAAM,gBAAgB,GAAG,CAAC,EAC/B,QAAQ,EACR,MAAM,EACN,GAAG,EACH,KAAK,GAAG,CAAC,GAMV,EAAQ,EAAE;IACT,MAAM,IAAI,GAAG,IAAA,iCAAuB,EAAC,QAAQ,CAAC,CAAC;IAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,qBAAW,EAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAChE,IAAI,OAAO,EAAE;QACX,OAAO,CAAC,QAAQ;aACb,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC5C,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,IAAA,qBAAW,EAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CACZ,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CACd,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC;YACnD,IAAA,qBAAW,EAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CACjE,CAAC;KACH;SAAM;QACL,IAAA,qBAAW,EAAC;YACV,SAAS,EAAE,QAAQ;YACnB,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE;SAChE,CAAC,CAAC;KACJ;AACH,CAAC,CAAC;AA7BW,QAAA,gBAAgB,oBA6B3B;AAEF,kBAAe,wBAAgB,CAAC","sourcesContent":["import getBasicTreeByParentUid from \"../queries/getBasicTreeByParentUid\";\nimport deleteBlock from \"../writes/deleteBlock\";\nimport createBlock from \"../writes/createBlock\";\nimport toFlexRegex from \"./toFlexRegex\";\n\nexport const setInputSettings = ({\n  blockUid,\n  values,\n  key,\n  index = 0,\n}: {\n  blockUid: string;\n  values: string[];\n  key: string;\n  index?: number;\n}): void => {\n  const tree = getBasicTreeByParentUid(blockUid);\n  const keyNode = tree.find((t) => toFlexRegex(key).test(t.text));\n  if (keyNode) {\n    keyNode.children\n      .filter(({ text }) => !values.includes(text))\n      .forEach(({ uid }) => deleteBlock(uid));\n    values.forEach(\n      (text, order) =>\n        !keyNode.children.some(({ text: c }) => text === c) &&\n        createBlock({ node: { text }, order, parentUid: keyNode.uid })\n    );\n  } else {\n    createBlock({\n      parentUid: blockUid,\n      order: index,\n      node: { text: key, children: values.map((text) => ({ text })) },\n    });\n  }\n};\n\nexport default setInputSettings;\n"]}