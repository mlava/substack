"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const addStyle_1 = tslib_1.__importDefault(require("../dom/addStyle"));
const react_dom_1 = tslib_1.__importDefault(require("react-dom"));
const env_1 = require("./env");
const shim_1 = require("use-sync-external-store/shim");
const extensionApiContext_1 = require("./extensionApiContext");
const apiPost_1 = tslib_1.__importDefault(require("./apiPost"));
const Toast_1 = tslib_1.__importDefault(require("../components/Toast"));
const runExtension = (run) => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore React17 shim
    window.React.useSyncExternalStore = shim_1.useSyncExternalStore;
    let unload;
    const extensionId = (0, env_1.getRoamJSExtensionIdEnv)();
    const registry = {
        elements: [],
        reactRoots: [],
        observers: [],
        domListeners: [],
        commands: [],
        timeouts: [],
    };
    const register = (res) => {
        Object.keys(res).forEach((k) => {
            const key = k;
            const val = res[key];
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore this is actually safe, but dont know how to coerce
            registry[key].push(...val);
        });
    };
    const registerListener = ((e) => {
        const res = e.detail;
        register(res);
    });
    document.body.addEventListener(`roamjs:${extensionId}:register`, registerListener);
    registry.domListeners.push({
        listener: registerListener,
        el: document.body,
        type: `roamjs:${extensionId}:register`,
    });
    const unregisterListener = ((e) => {
        const res = e.detail;
        Object.keys(res).forEach((k) => {
            const key = k;
            const val = res[key];
            if (val) {
                val.forEach((el) => {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore this is actually safe, but dont know how to coerce
                    const idx = registry[key].indexOf(el);
                    if (idx > -1) {
                        registry[key].splice(idx, 1);
                    }
                });
            }
        });
    });
    document.body.addEventListener(`roamjs:${extensionId}:unregister`, unregisterListener);
    registry.domListeners.push({
        listener: unregisterListener,
        el: document.body,
        type: `roamjs:${extensionId}:unregister`,
    });
    const onload = (args) => {
        var _a, _b, _c, _d, _e, _f;
        if ((_c = (_b = (_a = window.roamjs) === null || _a === void 0 ? void 0 : _a.loaded) === null || _b === void 0 ? void 0 : _b.has) === null || _c === void 0 ? void 0 : _c.call(_b, extensionId)) {
            return;
        }
        (0, extensionApiContext_1.provideExtensionApi)(args.extensionAPI);
        window.roamjs = {
            loaded: ((_d = window.roamjs) === null || _d === void 0 ? void 0 : _d.loaded) || new Set(),
            extension: ((_e = window.roamjs) === null || _e === void 0 ? void 0 : _e.extension) || {},
            version: ((_f = window.roamjs) === null || _f === void 0 ? void 0 : _f.version) || {},
            actions: {},
        };
        window.roamjs.loaded.add(extensionId);
        window.roamjs.version[extensionId] = (0, env_1.getRoamJSVersionEnv)();
        registry.elements.push((0, addStyle_1.default)(`.bp3-button:focus {
    outline-width: 2px;
  }`, "roamjs-default"));
        run(args)
            .then((res) => {
            if (typeof res === "function") {
                unload = res;
            }
            else if (typeof res === "object") {
                const { unload: resUnload } = res, registry = tslib_1.__rest(res, ["unload"]);
                register(registry);
                unload = resUnload;
            }
            const globalApi = window.roamjs.extension[extensionId];
            if ((0, env_1.getNodeEnv)() === "development") {
                if (globalApi)
                    globalApi.extensionAPI = args.extensionAPI;
                else
                    window.roamjs.extension[extensionId] = {
                        extensionAPI: args.extensionAPI,
                    };
            }
            document.body.dispatchEvent(new Event(`roamjs:${extensionId}:loaded`));
        })
            .catch((e) => {
            const error = e;
            (0, apiPost_1.default)({
                domain: "https://api.samepage.network",
                path: "errors",
                data: {
                    method: "extension-error",
                    type: "RoamJS Extension Failed to Load",
                    data: {
                        extensionId,
                        settings: args.extensionAPI.settings.getAll(),
                        roamDepotVersion: args.extension.version,
                    },
                    message: error.message,
                    stack: error.stack,
                    version: process.env.VERSION,
                    notebookUuid: JSON.stringify({
                        owner: "RoamJS",
                        app: extensionId,
                        workspace: window.roamAlphaAPI.graph.name,
                    }),
                },
            })
                .then(() => (0, Toast_1.default)({
                id: "roamjs-extension-error",
                content: `Failed to load ${extensionId} extension. An Error Report has been sent to the SamePage team.`,
                intent: "danger",
            }))
                .catch(() => {
                (0, Toast_1.default)({
                    id: "roamjs-email-error",
                    content: `Failed to load ${extensionId} extension. The Error Report also failed to send to the SamePage team, please reach out to them directly at support@samepage.network.`,
                    intent: "danger",
                });
            });
        });
    };
    const onunload = () => {
        var _a, _b, _c, _d, _e;
        registry.elements.forEach((e) => e.remove());
        registry.reactRoots.forEach((e) => {
            react_dom_1.default.unmountComponentAtNode(e);
            e.remove();
        });
        registry.observers.forEach((e) => e.disconnect());
        registry.domListeners.forEach((e) => e.el.removeEventListener(e.type, e.listener));
        registry.commands.forEach((label) => window.roamAlphaAPI.ui.commandPalette.removeCommand({ label }));
        registry.timeouts.forEach((e) => window.clearTimeout(e.timeout));
        (_a = window.roamjs) === null || _a === void 0 ? true : delete _a.extension[extensionId];
        (_b = window.roamjs) === null || _b === void 0 ? true : delete _b.version[extensionId];
        (_c = window.roamjs) === null || _c === void 0 ? void 0 : _c.loaded.delete(extensionId);
        if (!((_d = window.roamjs) === null || _d === void 0 ? void 0 : _d.loaded.size)) {
            (_e = document.getElementById("roamjs-default")) === null || _e === void 0 ? void 0 : _e.remove();
        }
        unload === null || unload === void 0 ? void 0 : unload();
    };
    return {
        onload,
        onunload,
    };
};
exports.default = runExtension;
//# sourceMappingURL=runExtension.js.map