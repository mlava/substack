"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const env_1 = require("./env");
const getAuthorizationHeader_1 = tslib_1.__importDefault(require("./getAuthorizationHeader"));
const handleFetch = (transformArgs, { method, anonymous, authorization, path, href, domain, headers = {}, buffer }) => {
    const url = new URL(href || `${domain || (0, env_1.getApiUrlEnv)()}/${path}`);
    const defaultHeaders = !anonymous
        ? { Authorization: authorization || (0, getAuthorizationHeader_1.default)() }
        : {};
    return fetch(...transformArgs(url, {
        method,
        headers: Object.assign(Object.assign({}, defaultHeaders), headers),
    })).then((r) => {
        if (!r.ok) {
            return r.text().then((e) => {
                try {
                    return Promise.reject(JSON.parse(e));
                }
                catch (_a) {
                    return Promise.reject(new Error(e));
                }
            });
        }
        else if (r.status === 204) {
            return {};
        }
        const type = r.headers.get("content-type") || "";
        return (buffer
            ? r.arrayBuffer()
            : /^application\/json/.test(type)
                ? r.json().then((d) => (Object.assign(Object.assign({}, (Array.isArray(d) ? { data: d } : d)), { headers: Object.fromEntries(r.headers.entries()), status: r.status })))
                : r.text().then((t) => ({
                    data: t,
                    headers: Object.fromEntries(r.headers.entries()),
                    status: r.status,
                }))).catch(() => r.text().then((e) => Promise.reject(new Error(e))));
    });
};
exports.default = handleFetch;
//# sourceMappingURL=handleFetch.js.map