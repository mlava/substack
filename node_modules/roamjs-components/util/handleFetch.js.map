{"version":3,"file":"handleFetch.js","sourceRoot":"","sources":["../../src/util/handleFetch.ts"],"names":[],"mappings":";;;AAAA,+BAAqC;AACrC,8FAA8D;AAuB9D,MAAM,WAAW,GAAgB,CAC/B,aAAa,EACb,EAAE,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,MAAM,EAAE,EAC9E,EAAE;IACF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,MAAM,IAAI,IAAA,kBAAY,GAAE,IAAI,IAAI,EAAE,CAAC,CAAC;IACnE,MAAM,cAAc,GAAG,CAAC,SAAS;QAC/B,CAAC,CAAC,EAAE,aAAa,EAAE,aAAa,IAAI,IAAA,gCAAsB,GAAE,EAAE;QAC9D,CAAC,CAAE,EAAkB,CAAC;IACxB,OAAO,KAAK,CACV,GAAG,aAAa,CAAC,GAAG,EAAE;QACpB,MAAM;QACN,OAAO,kCAAO,cAAc,GAAK,OAAO,CAAE;KAC3C,CAAC,CACH,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;QACX,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACT,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACzB,IAAI;oBACF,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtC;gBAAC,WAAM;oBACN,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBACrC;YACH,CAAC,CAAC,CAAC;SACJ;aAAM,IAAI,CAAC,CAAC,MAAM,KAAK,GAAG,EAAE;YAC3B,OAAO,EAA6B,CAAC;SACtC;QACD,MAAM,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAEjD,OAAO,CACL,MAAM;YACJ,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;YACjB,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;gBACjC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,iCAChB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KACvC,OAAO,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAChD,MAAM,EAAE,CAAC,CAAC,MAAM,IAChB,CAAC;gBACL,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBACpB,IAAI,EAAE,CAAC;oBACP,OAAO,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;oBAChD,MAAM,EAAE,CAAC,CAAC,MAAM;iBACjB,CAAC,CAAC,CACR,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,WAAW,CAAC","sourcesContent":["import { getApiUrlEnv } from \"./env\";\nimport getAuthorizationHeader from \"./getAuthorizationHeader\";\n\nexport type HandleFetchArgs = {\n  path?: string;\n  domain?: string;\n  href?: string;\n  data?: Record<string, unknown> | Uint8Array;\n  authorization?: string;\n  anonymous?: boolean;\n  headers?: Record<string, string>;\n  buffer?: boolean;\n};\n\n// type HandleFetchReturn<T, B> = B extends true\n//   ? Promise<ArrayBuffer>\n//   : Promise<T>;\n\ntype HandleFetch = <T extends Record<string, unknown> | ArrayBuffer>(\n  transformArgs: (...info: [URL, RequestInit]) => Parameters<typeof fetch>,\n  args: Pick<RequestInit, \"method\"> & Omit<HandleFetchArgs, \"data\">\n  // ) => HandleFetchReturn<T, B>;\n) => Promise<T>;\n\nconst handleFetch: HandleFetch = (\n  transformArgs,\n  { method, anonymous, authorization, path, href, domain, headers = {}, buffer }\n) => {\n  const url = new URL(href || `${domain || getApiUrlEnv()}/${path}`);\n  const defaultHeaders = !anonymous\n    ? { Authorization: authorization || getAuthorizationHeader() }\n    : ({} as HeadersInit);\n  return fetch(\n    ...transformArgs(url, {\n      method,\n      headers: { ...defaultHeaders, ...headers },\n    })\n  ).then((r) => {\n    if (!r.ok) {\n      return r.text().then((e) => {\n        try {\n          return Promise.reject(JSON.parse(e));\n        } catch {\n          return Promise.reject(new Error(e));\n        }\n      });\n    } else if (r.status === 204) {\n      return {} as ReturnType<HandleFetch>;\n    }\n    const type = r.headers.get(\"content-type\") || \"\";\n\n    return (\n      buffer\n        ? r.arrayBuffer()\n        : /^application\\/json/.test(type)\n        ? r.json().then((d) => ({\n            ...(Array.isArray(d) ? { data: d } : d),\n            headers: Object.fromEntries(r.headers.entries()),\n            status: r.status,\n          }))\n        : r.text().then((t) => ({\n            data: t,\n            headers: Object.fromEntries(r.headers.entries()),\n            status: r.status,\n          }))\n    ).catch(() => r.text().then((e) => Promise.reject(new Error(e))));\n  });\n};\n\nexport default handleFetch;\n"]}