"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const getWorkerClient = ({ name, onLoad, }) => {
    const workerUrl = document.currentScript.src.replace(/\/main\.js$/, `/${name}.js`);
    const worker = {
        current: undefined,
        init: false,
    };
    const listeners = {};
    const initializeWorker = () => fetch(workerUrl)
        .then((r) => r.blob())
        .then((r) => {
        worker.current = new Worker(window.URL.createObjectURL(r));
        worker.current.onmessage = (e) => {
            var _a;
            const _b = e.data, { method } = _b, data = tslib_1.__rest(_b, ["method"]);
            (_a = listeners[method]) === null || _a === void 0 ? void 0 : _a.call(listeners, data);
        };
        return onLoad ? onLoad() : Promise.resolve();
    })
        .then(() => {
        worker.init = true;
        document.body.dispatchEvent(new Event(`roamjs:${name}-worker:init`));
        return worker.current;
    });
    const terminateWorker = () => {
        var _a;
        (_a = worker.current) === null || _a === void 0 ? void 0 : _a.terminate();
    };
    const getWorker = () => worker.current && worker.init
        ? Promise.resolve(worker.current)
        : new Promise((resolve) => document.body.addEventListener(`roamjs:${name}-worker:init`, () => worker.current && resolve(worker.current)));
    return {
        getWorker,
        terminateWorker,
        initializeWorker,
        listeners,
    };
};
exports.default = getWorkerClient;
//# sourceMappingURL=getWorkerClient.js.map