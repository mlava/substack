"use strict";
// Some developers may use roamjs-components without RoamJS scripting, in which case
// envs wont be interpolated. best way to deal with that afaik is to try to get the value
// catch defaulting to a known value
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoamJSExtensionIdEnv = exports.getApiUrlEnv = exports.getRoamJSVersionEnv = exports.getNodeEnv = void 0;
// Cannot do a DRY approach either because bundlers need the full `process.env.VAR` text
// outlined to be replaced
const getNodeEnv = (defaultValue = "production") => {
    try {
        return process.env.NODE_ENV || defaultValue;
    }
    catch (_a) {
        return defaultValue;
    }
};
exports.getNodeEnv = getNodeEnv;
const getRoamJSVersionEnv = () => {
    try {
        return process.env.ROAMJS_VERSION || process.env.VERSION || (0, exports.getNodeEnv)("");
    }
    catch (_a) {
        return (0, exports.getNodeEnv)("");
    }
};
exports.getRoamJSVersionEnv = getRoamJSVersionEnv;
const getApiUrlEnv = () => {
    const defaultValue = (0, exports.getNodeEnv)() === "production"
        ? "https://lambda.roamjs.com"
        : "http://localhost:3003";
    try {
        return process.env.API_URL || defaultValue;
    }
    catch (_a) {
        return defaultValue;
    }
};
exports.getApiUrlEnv = getApiUrlEnv;
const getRoamJSExtensionIdEnv = () => {
    try {
        return (process.env.PACKAGE_NAME || "roamjs");
    }
    catch (_a) {
        return "roamjs";
    }
};
exports.getRoamJSExtensionIdEnv = getRoamJSExtensionIdEnv;
//# sourceMappingURL=env.js.map