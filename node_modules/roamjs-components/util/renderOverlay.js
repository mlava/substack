"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const nanoid_1 = tslib_1.__importDefault(require("nanoid"));
const react_1 = tslib_1.__importDefault(require("react"));
const react_dom_1 = tslib_1.__importDefault(require("react-dom"));
const dispatchToRegistry_1 = tslib_1.__importDefault(require("./dispatchToRegistry"));
const removeFromRegistry_1 = tslib_1.__importDefault(require("./removeFromRegistry"));
const BEFORE_REGEX = /::before\(([\w.-]+)\)$/;
const renderOverlay = ({ id = (0, nanoid_1.default)(), Overlay = (props) => react_1.default.createElement("div", props), props = {}, path = "body", } = {}) => {
    var _a;
    const parent = document.createElement("div");
    parent.id = id.replace(/^\d*/, "");
    const pathElement = typeof path === "string"
        ? document.querySelector(path.replace(BEFORE_REGEX, ""))
        : path;
    if (pathElement && !pathElement.querySelector(`#${parent.id}`)) {
        const before = typeof path === "string" ? (_a = BEFORE_REGEX.exec(path)) === null || _a === void 0 ? void 0 : _a[1] : undefined;
        if (!before) {
            pathElement.appendChild(parent);
        }
        else if (!Number.isNaN(Number(before))) {
            pathElement.insertBefore(parent, pathElement.children[Number(before)]);
        }
        else if (pathElement.querySelector(before)) {
            pathElement.insertBefore(parent, pathElement.querySelector(before));
        }
        else {
            return undefined;
        }
        const onClose = () => {
            if (typeof props.onClose === "function")
                props.onClose();
            react_dom_1.default.unmountComponentAtNode(parent);
            parent.remove();
            (0, removeFromRegistry_1.default)({
                reactRoots: [parent],
            });
        };
        react_dom_1.default.render(react_1.default.createElement(Overlay, Object.assign(Object.assign({}, props), { isOpen: true, onClose })), parent);
        (0, dispatchToRegistry_1.default)({
            reactRoots: [parent],
        });
        return onClose;
    }
    return undefined;
};
exports.default = renderOverlay;
//# sourceMappingURL=renderOverlay.js.map