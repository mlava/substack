"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const getChildrenLengthByPageUid_1 = tslib_1.__importDefault(require("../queries/getChildrenLengthByPageUid"));
const getOrderByBlockUid_1 = tslib_1.__importDefault(require("../queries/getOrderByBlockUid"));
const getParentUidByBlockUid_1 = tslib_1.__importDefault(require("../queries/getParentUidByBlockUid"));
const getTextByBlockUid_1 = tslib_1.__importDefault(require("../queries/getTextByBlockUid"));
const createBlock_1 = tslib_1.__importDefault(require("../writes/createBlock"));
const updateBlock_1 = tslib_1.__importDefault(require("../writes/updateBlock"));
const createHTMLObserver_1 = tslib_1.__importDefault(require("./createHTMLObserver"));
const getCurrentPageUid_1 = tslib_1.__importDefault(require("./getCurrentPageUid"));
const getUids_1 = tslib_1.__importDefault(require("./getUids"));
const addBlockCommand = ({ label, callback, }) => {
    const textareaRef = {
        current: null,
    };
    const loadBlockUid = (pageUid) => {
        if (textareaRef.current) {
            const uid = (0, getUids_1.default)(textareaRef.current).blockUid;
            const parentUid = (0, getParentUidByBlockUid_1.default)(uid);
            const text = (0, getTextByBlockUid_1.default)(uid);
            if (text.length) {
                return (0, createBlock_1.default)({
                    node: { text: "Loading..." },
                    parentUid,
                    order: (0, getOrderByBlockUid_1.default)(uid) + 1,
                });
            }
            return (0, updateBlock_1.default)({
                uid,
                text: "Loading...",
            });
        }
        return (0, createBlock_1.default)({
            node: { text: "Loading..." },
            parentUid: pageUid,
            order: (0, getChildrenLengthByPageUid_1.default)(pageUid),
        });
    };
    (0, createHTMLObserver_1.default)({
        tag: "TEXTAREA",
        className: "rm-block-input",
        callback: (t) => (textareaRef.current = t),
    });
    window.roamAlphaAPI.ui.commandPalette.addCommand({
        label,
        callback: () => {
            const parentUid = (0, getCurrentPageUid_1.default)();
            loadBlockUid(parentUid).then(callback);
        },
    });
};
exports.default = addBlockCommand;
//# sourceMappingURL=addBlockCommand.js.map