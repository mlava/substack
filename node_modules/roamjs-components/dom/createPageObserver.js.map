{"version":3,"file":"createPageObserver.js","sourceRoot":"","sources":["../../src/dom/createPageObserver.ts"],"names":[],"mappings":";;;AAAA,yGAAyE;AACzE,8EAA8C;AAC9C,gFAAgD;AAChD,gEAAgC;AAEhC,MAAM,kBAAkB,GAAG,CACzB,IAAY,EACZ,QAAoD,EAClC,EAAE,CACpB,IAAA,wBAAc,EAAC,CAAC,EAAE,EAAE,EAAE;IACpB,MAAM,UAAU,GAAG,IAAA,yBAAe,EAAC;QACjC,EAAE;QACF,QAAQ,EAAE,YAAY;QACtB,GAAG,EAAE,KAAK;QACV,SAAS,EAAE,YAAY;KACxB,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACrB,QAAQ,EAAE,IAAA,iBAAO,EAAC,SAA2B,CAAC,CAAC,QAAQ;QACvD,KAAK,EAAE,IAAI;KACZ,CAAC,CAAC,CAAC;IACJ,MAAM,YAAY,GAAG,IAAA,yBAAe,EAAC;QACnC,EAAE;QACF,QAAQ,EAAE,cAAc;QACxB,GAAG,EAAE,KAAK;QACV,SAAS,EAAE,YAAY;KACxB,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACrB,QAAQ,EAAE,IAAA,iBAAO,EAAC,SAA2B,CAAC,CAAC,QAAQ;QACvD,KAAK,EAAE,KAAK;KACb,CAAC,CAAC,CAAC;IACJ,IAAI,UAAU,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,EAAE;QAC5C,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,IAAA,iCAAuB,EAAC,IAAI,CAAC,CAAC,CAAC;QACzD,CAAC,GAAG,YAAY,EAAE,GAAG,UAAU,CAAC;aAC7B,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;aACjD,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;KAChE;AACH,CAAC,CAAC,CAAA;AAEJ,kBAAe,kBAAkB,CAAC","sourcesContent":["import getBlockUidsByPageTitle from \"../queries/getBlockUidsByPageTitle\";\nimport createObserver from \"./createObserver\";\nimport getMutatedNodes from \"./getMutatedNodes\";\nimport getUids from \"./getUids\";\n\nconst createPageObserver = (\n  name: string,\n  callback: (blockUid: string, added: boolean) => void\n): MutationObserver =>\n  createObserver((ms) => {\n    const addedNodes = getMutatedNodes({\n      ms,\n      nodeList: \"addedNodes\",\n      tag: \"DIV\",\n      className: \"roam-block\",\n    }).map((blockNode) => ({\n      blockUid: getUids(blockNode as HTMLDivElement).blockUid,\n      added: true,\n    }));\n    const removedNodes = getMutatedNodes({\n      ms,\n      nodeList: \"removedNodes\",\n      tag: \"DIV\",\n      className: \"roam-block\",\n    }).map((blockNode) => ({\n      blockUid: getUids(blockNode as HTMLDivElement).blockUid,\n      added: false,\n    }));\n    if (addedNodes.length || removedNodes.length) {\n      const blockUids = new Set(getBlockUidsByPageTitle(name));\n      [...removedNodes, ...addedNodes]\n        .filter(({ blockUid }) => blockUids.has(blockUid))\n        .forEach(({ blockUid, added }) => callback(blockUid, added));\n    }\n  })\n\nexport default createPageObserver;\n"]}