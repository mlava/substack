{"version":3,"file":"addKeyboardTriggers.js","sourceRoot":"","sources":["../../src/dom/addKeyboardTriggers.ts"],"names":[],"mappings":";;;AACA,sGAAsE;AAEtE,MAAM,kBAAkB,GAAG,CAAC,EAC1B,QAAQ,EAAE,aAAa,GASxB,EAAE,EAAE;IACH,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE;QAC3D,IAAI,OAAO,YAAY,MAAM,EAAE;YAC7B,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;SAC9B;aAAM,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;YACxC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC;SACzC;aAAM;YACL,MAAM,YAAY,GAAG,IAAA,iCAAuB,EAAC;gBAC3C,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,GAAG,EAAE,SAAS;gBACd,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,MAAM;aAC7C,CAAC;iBACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;iBACjB,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;iBACtB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;iBACrB,IAAI,EAAE,CAAC;YAEV,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,GAAG,YAAY,GAAG,CAAC,CAAC;YACpD,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;SAC5C;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;;QACvC,MAAM,MAAM,GAAG,CAAC,CAAC,MAAqB,CAAC;QACvC,IACE,MAAM,CAAC,OAAO,KAAK,UAAU;YAC7B,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAC3C;YACA,MAAM,QAAQ,GAAG,MAA6B,CAAC;YAC/C,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAC5C,CAAC,EACD,QAAQ,CAAC,cAAc,CACxB,CAAC;YACF,MAAA,MAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,0CAAE,QAAQ,kDAAI,CAAC;SACzE;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,kBAAkB,CAAC","sourcesContent":["import type { RoamBasicNode } from \"../types/native\";\nimport getSettingValueFromTree from \"../util/getSettingValueFromTree\";\n\nconst addKeybordTriggers = ({\n  triggers: inputTriggers,\n}: {\n  triggers: {\n    trigger:\n      | RegExp\n      | (() => RegExp)\n      | { tree: RoamBasicNode[]; defaultValue?: string };\n    callback: () => void;\n  }[];\n}) => {\n  const triggers = inputTriggers.map(({ trigger, callback }) => {\n    if (trigger instanceof RegExp) {\n      return { trigger, callback };\n    } else if (typeof trigger === \"function\") {\n      return { callback, trigger: trigger() };\n    } else {\n      const triggerValue = getSettingValueFromTree({\n        tree: trigger.tree,\n        key: \"trigger\",\n        defaultValue: trigger.defaultValue || \"\\\\\\\\\",\n      })\n        .replace(/\"/g, \"\")\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\+/g, \"\\\\+\")\n        .trim();\n\n      const triggerRegex = new RegExp(`${triggerValue}$`);\n      return { callback, trigger: triggerRegex };\n    }\n  });\n\n  document.addEventListener(\"input\", (e) => {\n    const target = e.target as HTMLElement;\n    if (\n      target.tagName === \"TEXTAREA\" &&\n      target.classList.contains(\"rm-block-input\")\n    ) {\n      const textarea = target as HTMLTextAreaElement;\n      const valueToCursor = textarea.value.substring(\n        0,\n        textarea.selectionStart\n      );\n      triggers.find((args) => args.trigger.test(valueToCursor))?.callback?.();\n    }\n  });\n};\n\nexport default addKeybordTriggers;\n"]}