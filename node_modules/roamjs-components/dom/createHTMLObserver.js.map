{"version":3,"file":"createHTMLObserver.js","sourceRoot":"","sources":["../../src/dom/createHTMLObserver.ts"],"names":[],"mappings":";;;AAAA,8EAA8C;AAC9C,4FAA4D;AAE5D,MAAM,kBAAkB,GAAG,CAAC,EAC1B,QAAQ,EACR,GAAG,EACH,SAAS,EACT,cAAc,EACd,OAAO,GAOR,EAAoB,EAAE;IACrB,MAAM,WAAW,GAAG,CAAC,CAAO,EAAE,EAAE,CAC9B,KAAK,CAAC,IAAI,CAAE,CAAiB,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CACrE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,GAAG,CACT,CAAC;IACrB,WAAW,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAExC,MAAM,MAAM,GAAG,CAAC,CAAO,EAAE,EAAE,CACzB,CAAC,CAAC,QAAQ,KAAK,GAAG;QAClB,KAAK,CAAC,IAAI,CAAE,CAAiB,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC/D,MAAM,QAAQ,GAAG,CAAC,KAAe,EAAE,EAAE,CACnC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;SACd,MAAM,CAAC,CAAC,CAAO,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,CAAC;SACnD,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAExD,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,+BAAqB,CAAC,CAAC,CAAC,wBAAc,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE;QAC/D,MAAM,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC9B,GAAG,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YAChE,GAAG,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;SACpE,CAAC,CAAC;QACH,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAClB,CAAC,CAAC,KAAK;YACL,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAmB,CAAC;YACjC,CAAC,CAAC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAG,CAAC,CAAC,IAAmB,CAAC,CAC5C,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,kBAAkB,CAAC","sourcesContent":["import createObserver from \"./createObserver\";\nimport createOverlayObserver from \"./createOverlayObserver\";\n\nconst createHTMLObserver = ({\n  callback,\n  tag,\n  className,\n  removeCallback,\n  useBody,\n}: {\n  callback: (b: HTMLElement) => void;\n  tag: string;\n  className: string;\n  removeCallback?: (b: HTMLElement) => void;\n  useBody?: boolean;\n}): MutationObserver => {\n  const getChildren = (d: Node) =>\n    Array.from((d as HTMLElement).getElementsByClassName(className)).filter(\n      (d) => d.nodeName === tag\n    ) as HTMLElement[];\n  getChildren(document).forEach(callback);\n\n  const isNode = (d: Node) =>\n    d.nodeName === tag &&\n    Array.from((d as HTMLElement).classList).includes(className);\n  const getNodes = (nodes: NodeList) =>\n    Array.from(nodes)\n      .filter((d: Node) => isNode(d) || d.hasChildNodes())\n      .flatMap((d) => (isNode(d) ? [d] : getChildren(d)));\n\n  return (useBody ? createOverlayObserver : createObserver)((ms) => {\n    const nodes = ms.flatMap((m) => [\n      ...getNodes(m.addedNodes).map((node) => ({ node, added: true })),\n      ...getNodes(m.removedNodes).map((node) => ({ node, added: false })),\n    ]);\n    nodes.forEach((b) =>\n      b.added\n        ? callback(b.node as HTMLElement)\n        : removeCallback?.(b.node as HTMLElement)\n    );\n  });\n};\n\nexport default createHTMLObserver;\n"]}