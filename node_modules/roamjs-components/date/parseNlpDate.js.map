{"version":3,"file":"parseNlpDate.js","sourceRoot":"","sources":["../../src/date/parseNlpDate.ts"],"names":[],"mappings":"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","sourcesContent":["import addWeeks from \"date-fns/addWeeks\";\nimport addDays from \"date-fns/addDays\";\nimport dateFnsStartOfWeek from \"date-fns/startOfWeek\";\nimport startOfMonth from \"date-fns/startOfMonth\";\nimport startOfYear from \"date-fns/startOfYear\";\nimport dateFnsEndOfWeek from \"date-fns/endOfWeek\";\nimport endOfMonth from \"date-fns/endOfMonth\";\nimport endOfYear from \"date-fns/endOfYear\";\nimport { Chrono, Parser } from \"chrono-node\";\nimport { ParsingComponents } from \"chrono-node/dist/results\";\nimport getCurrentUserUid from \"../queries/getCurrentUserUid\";\n\nconst startOfWeek = (date: Date) => {\n  const weekStartsOn = window.roamAlphaAPI.pull(\"[:user/settings]\", [\n    \":user/uid\",\n    getCurrentUserUid(),\n  ])?.[\":user/settings\"]?.[\":first-day-of-week\"];\n  return dateFnsStartOfWeek(date, weekStartsOn ? { weekStartsOn } : undefined);\n};\n\nconst endOfWeek = (date: Date) => {\n  const weekStartsOn = window.roamAlphaAPI.pull(\"[:user/settings]\", [\n    \":user/uid\",\n    getCurrentUserUid(),\n  ])?.[\":user/settings\"]?.[\":first-day-of-week\"];\n  return dateFnsEndOfWeek(date, weekStartsOn ? { weekStartsOn } : undefined);\n};\n\nconst ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n  first: 1,\n  second: 2,\n  third: 3,\n  fourth: 4,\n  fifth: 5,\n  sixth: 6,\n  seventh: 7,\n  eighth: 8,\n  ninth: 9,\n  tenth: 10,\n  eleventh: 11,\n  twelfth: 12,\n  thirteenth: 13,\n  fourteenth: 14,\n  fifteenth: 15,\n  sixteenth: 16,\n  seventeenth: 17,\n  eighteenth: 18,\n  nineteenth: 19,\n  twentieth: 20,\n  \"twenty first\": 21,\n  \"twenty-first\": 21,\n  \"twenty second\": 22,\n  \"twenty-second\": 22,\n  \"twenty third\": 23,\n  \"twenty-third\": 23,\n  \"twenty fourth\": 24,\n  \"twenty-fourth\": 24,\n  \"twenty fifth\": 25,\n  \"twenty-fifth\": 25,\n  \"twenty sixth\": 26,\n  \"twenty-sixth\": 26,\n  \"twenty seventh\": 27,\n  \"twenty-seventh\": 27,\n  \"twenty eighth\": 28,\n  \"twenty-eighth\": 28,\n  \"twenty ninth\": 29,\n  \"twenty-ninth\": 29,\n  thirtieth: 30,\n  \"thirty first\": 31,\n  \"thirty-first\": 31,\n};\n\nconst ORDINAL_REGEX = new RegExp(\n  `\\\\b(?:${Object.keys(ORDINAL_WORD_DICTIONARY)\n    .sort((a, b) => b.length - a.length)\n    .join(\"|\")}|(?:[1-9])?[0-9](?:st|nd|rd|th)?)\\\\b`,\n  \"i\"\n);\n\nconst customDateNlp = new Chrono();\nconst DAYS_OFFSET = {\n  sunday: 0,\n  sun: 0,\n  monday: 1,\n  mon: 1,\n  tuesday: 2,\n  tues: 2,\n  tue: 2,\n  wednesday: 3,\n  wed: 3,\n  thursday: 4,\n  thurs: 4,\n  thur: 4,\n  thu: 4,\n  friday: 5,\n  fri: 5,\n  saturday: 6,\n  sat: 6,\n};\nconst UPCOMING_PATTERN = new RegExp(\n  \"(\\\\W|^)\" +\n    \"(?:(?:\\\\,|\\\\(|\\\\（)\\\\s*)?\" +\n    \"(?:on\\\\s*?)?\" +\n    \"upcoming\\\\s*\" +\n    \"(\" +\n    Object.keys(DAYS_OFFSET).join(\"|\") +\n    \")\" +\n    \"(?=\\\\W|$)\",\n  \"i\"\n);\n// https://github.com/wanasit/chrono/blob/d8da3c840c50c959a62a0840c9a627f39bc765df/src/parsers/en/ENWeekdayParser.js\ncustomDateNlp.parsers.unshift({\n  pattern: () => UPCOMING_PATTERN,\n  extract: (context, match) => {\n    const index = (match.index || 0) + match[1].length;\n    const text = match[0].substr(\n      match[1].length,\n      match[0].length - match[1].length\n    );\n    const result = context.createParsingResult(index, text);\n\n    const dayOfWeek = match[2].toLowerCase();\n    const offset = DAYS_OFFSET[dayOfWeek as keyof typeof DAYS_OFFSET];\n    if (offset === undefined) {\n      return null;\n    }\n\n    const startMoment = context.refDate;\n    const refOffset = startMoment.getDay();\n    result.start.assign(\"weekday\", offset);\n    if (offset <= refOffset) {\n      startMoment.setDate(offset + 7 + startMoment.getDate() - refOffset);\n      result.start.assign(\"day\", startMoment.getDate());\n      result.start.assign(\"month\", startMoment.getMonth() + 1);\n      result.start.assign(\"year\", startMoment.getFullYear());\n    } else {\n      startMoment.setDate(offset + startMoment.getDate() - refOffset);\n      result.start.imply(\"day\", startMoment.getDate());\n      result.start.imply(\"month\", startMoment.getMonth() + 1);\n      result.start.imply(\"year\", startMoment.getFullYear());\n    }\n\n    return result;\n  },\n});\ncustomDateNlp.parsers.push(\n  {\n    pattern: () => /\\b((start|end) )?of\\b/i,\n    extract: () => ({}),\n  },\n  {\n    pattern: () => ORDINAL_REGEX,\n    extract: () => ({}),\n  }\n);\n\nexport const addNlpDateParser = (p: Parser) => customDateNlp.parsers.push(p);\n\nconst assignDay = (p: ParsingComponents, d: Date) => {\n  p.assign(\"year\", d.getFullYear());\n  p.assign(\"month\", d.getMonth() + 1);\n  p.assign(\"day\", d.getDate());\n};\ncustomDateNlp.refiners.unshift({\n  refine: (_, results) => {\n    if (results.length >= 2) {\n      const [modifier, date, ...rest] = results;\n      if (/start of/i.test(modifier.text)) {\n        const dateObj = date.date();\n        if (/week/i.test(date.text)) {\n          const newDateObj = startOfWeek(dateObj);\n          assignDay(date.start, newDateObj);\n        }\n        if (/month/i.test(date.text)) {\n          const newDateObj = startOfMonth(dateObj);\n          assignDay(date.start, newDateObj);\n        }\n        if (/year/i.test(date.text)) {\n          const newDateObj = startOfYear(dateObj);\n          assignDay(date.start, newDateObj);\n        }\n      } else if (/end of/i.test(modifier.text)) {\n        const dateObj = date.date();\n        if (/week/i.test(date.text)) {\n          const newDateObj = endOfWeek(dateObj);\n          assignDay(date.start, newDateObj);\n        }\n        if (/month/i.test(date.text)) {\n          const newDateObj = endOfMonth(dateObj);\n          assignDay(date.start, newDateObj);\n        }\n        if (/year/i.test(date.text)) {\n          const newDateObj = endOfYear(dateObj);\n          assignDay(date.start, newDateObj);\n        }\n      } else if (rest.length >= 2) {\n        const [of, d, ...moreRest] = rest;\n        if (\n          ORDINAL_REGEX.test(modifier.text) &&\n          date.start.isOnlyWeekdayComponent() &&\n          /of/i.test(of.text)\n        ) {\n          const match = (\n            ORDINAL_REGEX.exec(modifier.text)?.[0] || \"\"\n          ).toLowerCase();\n          const num =\n            ORDINAL_WORD_DICTIONARY[match] ||\n            Number(match.replace(/(?:st|nd|rd|th)$/i, \"\"));\n          const dateObj = d.date();\n          if (/month/i.test(d.text)) {\n            const startOfMonthDate = startOfMonth(dateObj);\n            const originalMonth = startOfMonthDate.getMonth();\n            const startOfWeekDate = startOfWeek(startOfMonthDate);\n            const dayOfWeekDate = addDays(\n              startOfWeekDate,\n              date.start.get(\"weekday\") || 0\n            );\n            const newDateObj = addWeeks(\n              dayOfWeekDate,\n              num - (originalMonth === dayOfWeekDate.getMonth() ? 1 : 0)\n            );\n            assignDay(d.start, newDateObj);\n          } else if (/year/i.test(d.text)) {\n            const startOfYearDate = startOfYear(dateObj);\n            const originalYear = startOfYearDate.getFullYear();\n            const startOfWeekDate = startOfWeek(startOfYearDate);\n            const dayOfWeekDate = addDays(\n              startOfWeekDate,\n              date.start.get(\"weekday\") || 0\n            );\n            const newDateObj = addWeeks(\n              dayOfWeekDate,\n              num - (originalYear === dayOfWeekDate.getFullYear() ? 1 : 0)\n            );\n            assignDay(d.start, newDateObj);\n          } else {\n            return results;\n          }\n          return [d, ...moreRest];\n        }\n      } else {\n        return results;\n      }\n      return [date, ...rest];\n    }\n    return results;\n  },\n});\n\nconst parseNlpDate = (s: string, ref?: Date): Date =>\n  customDateNlp.parseDate(s, ref) || new Date();\n\nexport const parse = (t: string, ref?: Date) => customDateNlp.parse(t, ref);\n\nexport default parseNlpDate;\n"]}