{"version":3,"file":"build.js","sourceRoot":"","sources":["../../package/scripts/build.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport compile, { CliOpts } from \"./internal/compile\";\nimport toVersion from \"./internal/toVersion\";\nimport { execSync } from \"child_process\";\nimport getPackageName from \"./internal/getPackageName\";\nimport axios from \"axios\";\nimport mimeTypes from \"mime-types\";\nimport path from \"path\";\nimport esbuild from \"esbuild\";\nimport appPath from \"./internal/appPath\";\nimport updateLambdaFunctions from \"./internal/updateLambdaFunctions\";\nimport { z } from \"zod\";\nimport { S3 } from \"@aws-sdk/client-s3\";\n\nconst publish = async ({\n  api,\n  root = \".\",\n  review,\n  version,\n  host = \"samepage.network\",\n}: {\n  api?: string;\n  root?: string;\n  review?: string;\n  version?: string;\n  host?: string;\n} = {}): Promise<void> => {\n  const token = process.env.GITHUB_TOKEN;\n  const destPath = getPackageName();\n  const assetsDir = path.join(root, \"assets\");\n  const distDir = path.join(root, \"dist\");\n  const branch =\n    process.env.GITHUB_HEAD_REF || process.env.GITHUB_REF_NAME || \"main\";\n  if (branch === \"main\") {\n    if (token) {\n      console.log(\n        `Preparing to publish zip to destination ${destPath} as version ${version}`\n      );\n      const cwd = process.cwd();\n      process.chdir(distDir);\n      execSync(`zip -qr ${destPath}.zip .`);\n      const opts = {\n        headers: {\n          Authorization: `token ${token}`,\n          Accept: \"application/vnd.github+json\",\n        },\n      };\n      const message = await axios\n        .get<{ commit: { message: string } }>(\n          `https://api.github.com/repos/${process.env.GITHUB_REPOSITORY}/commits/${process.env.GITHUB_SHA}`,\n          opts\n        )\n        .then((r) => r.data.commit.message)\n        .catch((r) =>\n          Promise.reject(\n            new Error(\n              `Failed to read commit message for ${process.env.GITHUB_SHA} in ${\n                process.env.GITHUB_REPOSITORY\n              }:\\n${JSON.stringify(\n                r.response.data || \"No response data found\"\n              )}`\n            )\n          )\n        );\n      const release = await axios\n        .post(\n          `https://api.github.com/repos/${process.env.GITHUB_REPOSITORY}/releases`,\n          {\n            tag_name: version,\n            name:\n              message.length > 50 ? `${message.substring(0, 47)}...` : message,\n            body: message.length > 50 ? `...${message.substring(47)}` : \"\",\n          },\n          opts\n        )\n        .catch((r) => {\n          const { data } = r.response;\n          if (data && data.errors && data.errors[0].code === \"already_exists\") {\n            return axios.get(\n              `https://api.github.com/repos/${process.env.GITHUB_REPOSITORY}/releases/tags/${version}`,\n              opts\n            );\n          }\n          return Promise.reject(\n            new Error(\n              `Failed to read post release ${version} for repo ${\n                process.env.GITHUB_REPOSITORY\n              }:\\n${JSON.stringify(data || \"No response data found\")}`\n            )\n          );\n        });\n      const { tag_name, id } = release.data;\n\n      const assets = fs.readdirSync(\".\");\n      await Promise.all(\n        assets\n          .filter((f) => f !== \"package.json\")\n          .map((asset) => {\n            const content = fs.readFileSync(asset);\n            const contentType = mimeTypes.lookup(asset);\n            return axios\n              .post(\n                `https://uploads.github.com/repos/${process.env.GITHUB_REPOSITORY}/releases/${id}/assets?name=${asset}`,\n                content,\n                contentType\n                  ? {\n                      ...opts,\n                      headers: {\n                        ...opts.headers,\n                        \"Content-Type\": contentType,\n                      },\n                    }\n                  : opts\n              )\n              .catch((e) => {\n                if (\n                  e.response &&\n                  Array.isArray(e.response.data?.errors) &&\n                  e.response.data?.errors[0]?.code === \"already_exists\"\n                ) {\n                  console.error(`Release asset ${asset} already exists`);\n                } else {\n                  console.error(\n                    `Failed to upload ${asset}:\\n${JSON.stringify(\n                      e.response?.data?.errors ||\n                        e.response?.data ||\n                        e.message ||\n                        \"{}\",\n                      null,\n                      4\n                    )}`\n                  );\n                }\n              });\n          })\n      );\n\n      console.log(\n        `Successfully created github release for version ${tag_name}`\n      );\n      process.chdir(cwd);\n    } else {\n      console.warn(\n        \"Github Release are only created when the GITHUB_TOKEN is set\"\n      );\n    }\n\n    await updateLambdaFunctions({\n      api,\n      out: \"out\",\n      root,\n      prefix: `extensions-${destPath.replace(/-samepage$/, \"\")}-`,\n    });\n\n    if (review && fs.existsSync(path.join(root, review)) && branch === \"main\") {\n      await import(appPath(`${root}/${review.replace(/\\.[jt]s$/, \"\")}`)).then(\n        //@ts-ignore\n        (mod) => typeof mod.default === \"function\" && mod.default()\n      );\n    }\n  } else {\n    console.warn(\"Not on main branch, skipping production releases\");\n  }\n  const awsToken = process.env.AWS_ACCESS_KEY_ID;\n  if (!!awsToken && host !== \"none\") {\n    const s3 = new S3({});\n    const Bucket = host;\n    const artifacts = fs.existsSync(distDir) ? fs.readdirSync(distDir) : [];\n    const assets = fs.existsSync(assetsDir) ? fs.readdirSync(assetsDir) : [];\n    const repo = process.env.GITHUB_REPOSITORY || \"samepage.network\";\n    await Promise.all(\n      artifacts\n        .flatMap((a) => {\n          const Key = `releases/${repo}/${\n            branch === \"main\" ? \"\" : `${branch}/`\n          }${a}`;\n          const Path = path.join(distDir, a);\n          const KeyLower = Key.toLowerCase();\n          // S3 object keys are case insensitive :shakes-fist:\n          return Key === KeyLower\n            ? [\n                {\n                  Key,\n                  Path,\n                },\n              ]\n            : [\n                {\n                  Key,\n                  Path,\n                },\n                {\n                  Key: KeyLower,\n                  Path,\n                },\n              ];\n        })\n        .concat(\n          branch === \"main\"\n            ? assets.map((a) => ({\n                Key: `assets/${repo\n                  .split(\"/\")\n                  .slice(-1)[0]\n                  .replace(/-samepage$/, \"\")}/${a}`,\n                Path: path.join(assetsDir, a),\n              }))\n            : []\n        )\n        .map(({ Key, Path }) =>\n          s3\n            .putObject({\n              Bucket,\n              Key,\n              Body: fs.createReadStream(Path),\n              ContentType: mimeTypes.lookup(Path) || \"application/octet-stream\",\n            })\n            .then(() => console.log(\"Uploaded\", Path, \"to\", Key))\n        )\n    );\n  } else {\n    console.warn(\"No access to AWS, skipping S3 uploads\");\n  }\n};\n\nconst analyzeMetafile = async (metafile: esbuild.Metafile, root = \".\") => {\n  const text = await esbuild.analyzeMetafile(metafile);\n  const files = text\n    .trim()\n    .split(/\\n/)\n    .filter((s) => !!s.trim())\n    .map((s) => {\n      const file = s.trim();\n      const args = /([├└])?\\s*([^\\s]+)\\s*(\\d+(?:\\.\\d)?[kmg]?b)\\s*/.exec(file);\n      if (!args) throw new Error(`Failed to parse ${file} from metadata`);\n      const [_, isFile, fileName, size] = args;\n      if (!fileName)\n        throw new Error(`Failed to parse filename from ${file} in metadata`);\n      return { isFile, fileName, size };\n    });\n  type TreeNode = {\n    fileName: string;\n    size: number;\n    children: TreeNode[];\n  };\n  const parseSize = (s: string) => {\n    const [_, value, unit] = /(\\d+(?:\\.\\d)?)([kmg]?b)/.exec(s) || [\"0\", \"b\"];\n    const mult =\n      unit === \"gb\"\n        ? 1000000000\n        : unit === \"mb\"\n        ? 1000000\n        : unit === \"kb\"\n        ? 1000\n        : 1;\n    return mult * Number(value);\n  };\n  const tree: TreeNode[] = [];\n  let maxLength = 0;\n  files.forEach((file) => {\n    maxLength = Math.max(maxLength, file.fileName.length);\n    if (file.isFile) {\n      let root = tree.slice(-1)[0];\n      const parts = file.fileName.split(\"/\");\n      parts.forEach((_, index, all) => {\n        const fileName = all.slice(0, index + 1).join(\"/\");\n        const size = parseSize(file.size);\n        const treeNode = root.children.find((c) => c.fileName === fileName);\n        if (treeNode) {\n          treeNode.size += size;\n          root = treeNode;\n        } else {\n          const newRoot = { children: [], fileName, size };\n          root.children.push(newRoot);\n          root = newRoot;\n        }\n      });\n    } else {\n      tree.push({\n        children: [],\n        fileName: file.fileName,\n        size: parseSize(file.size),\n      });\n    }\n  });\n  const calcSize = (t: TreeNode) => {\n    if (t.children.length) {\n      t.size = t.children.reduce((p, c) => p + calcSize(c), 0);\n    }\n    return t.size;\n  };\n  tree.forEach(calcSize);\n  const printTree = (t: TreeNode[], level = 0): string[] =>\n    t\n      .sort((a, b) => b.size - a.size)\n      .flatMap((tn) => {\n        const indent = \"\".padStart(level * 2, \" \");\n        return [\n          `${indent}${level ? \"├ \" : \"\"}${tn.fileName.padEnd(\n            maxLength + (level ? 6 : 8) - indent.length\n          )}${(tn.size >= 1000000000\n            ? `${(tn.size / 1000000000).toFixed(1)}gb`\n            : tn.size >= 1000000\n            ? `${(tn.size / 1000000).toFixed(1)}mb`\n            : tn.size >= 1000\n            ? `${(tn.size / 1000).toFixed(1)}kb`\n            : `${tn.size}b `\n          ).padStart(7, \" \")}`,\n          ...printTree(tn.children, level + 1),\n        ];\n      });\n  fs.writeFileSync(path.join(root, \"analyze.txt\"), printTree(tree).join(\"\\n\"));\n};\n\nconst zBuildArgs = z.object({\n  root: z.string().optional(),\n  dry: z.boolean().optional(),\n  review: z.string().optional(),\n  domain: z.string().optional(),\n  api: z.string().optional(),\n  verbose: z.boolean().optional(),\n  host: z.string().optional(),\n});\n\nconst build = (args: CliOpts = {}) => {\n  const { root, review, api, verbose, host } = zBuildArgs.parse(args);\n  process.env.NODE_ENV = process.env.NODE_ENV || \"production\";\n  process.env.ORIGIN = process.env.ORIGIN || \"https://samepage.network\";\n  const version = toVersion();\n  const envExisting = fs.existsSync(\".env\")\n    ? fs.readFileSync(\".env\").toString()\n    : \"\";\n  fs.writeFileSync(\n    \".env\",\n    `${envExisting.replace(/VERSION=[\\d.-]+\\n/gs, \"\")}VERSION=${version}\\n`\n  );\n  return compile({\n    opts: args,\n    builder: (opts) =>\n      esbuild\n        .build({\n          ...opts,\n          minify: !verbose,\n        })\n        .then(async (r) => {\n          if (!r.metafile) return;\n          return analyzeMetafile(r.metafile, root);\n        }),\n  })\n    .then(() =>\n      args.dry\n        ? Promise.resolve()\n        : publish({\n            review,\n            version,\n            root,\n            api,\n            host,\n          })\n    )\n    .then(() => {\n      console.log(\"done\");\n      return 0;\n    });\n};\n\nexport default build;\n"]}