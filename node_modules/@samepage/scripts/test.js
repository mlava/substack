"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const child_process_1 = require("child_process");
const client_s3_1 = require("@aws-sdk/client-s3");
const compile_1 = tslib_1.__importDefault(require("./internal/compile"));
const toVersion_1 = tslib_1.__importDefault(require("./internal/toVersion"));
const getPackageName_1 = tslib_1.__importDefault(require("./internal/getPackageName"));
const mime_types_1 = tslib_1.__importDefault(require("mime-types"));
const zod_1 = require("zod");
const os_1 = tslib_1.__importDefault(require("os"));
const shell = os_1.default.platform() === "win32";
const zTestArgs = zod_1.z.object({
    forward: zod_1.z.string().or(zod_1.z.string().array()).optional(),
    path: zod_1.z.string().optional(),
    unit: zod_1.z.boolean().optional(),
    integration: zod_1.z.boolean().optional(),
});
const test = (args) => {
    const { forward, path = (0, getPackageName_1.default)(), unit, integration, } = zTestArgs.parse(args);
    process.env.NODE_ENV = process.env.NODE_ENV || "test";
    const isDebug = !!(process.env.DEBUG || process.env.PWDEBUG);
    if (isDebug)
        process.env.DEBUG = process.env.DEBUG || process.env.PWDEBUG;
    return (0, compile_1.default)({ opts: args })
        .then(() => {
        const config = fs_1.default.existsSync("node_modules/@samepage/testing/playwright.config.js")
            ? ["--config=./node_modules/@samepage/testing/playwright.config.js"]
            : fs_1.default.existsSync("node_modules/samepage/testing/playwright.config.js")
                ? ["--config=./node_modules/samepage/testing/playwright.config.js"]
                : [];
        // TODO - add a way to proc with debugger
        const args = [
            "c8",
            "--reporter=lcov",
            "--reporter=text",
            "--all",
            "--include",
            "src",
            "--exclude",
            "node_modules",
            "--exclude-after-remap",
            "playwright",
            "test",
            ...config
                .concat(typeof forward === "string" ? [forward] : forward || [])
                .concat(isDebug && !process.env.CI ? ["--debug"] : [])
                .concat(unit ? ["--project=unit"] : [])
                .concat(integration ? ["--project=integration"] : []),
        ];
        const options = {
            stdio: "inherit",
            env: process.env,
            shell,
        };
        const proc = isDebug
            ? (0, child_process_1.spawn)("npx", ["--inspect"].concat(args), options)
            : (0, child_process_1.spawn)("npx", args, options);
        return new Promise((resolve, reject) => {
            proc.on("exit", (c) => {
                resolve(c === null ? 1 : c);
            });
            proc.on("error", (e) => {
                console.error("error from playwright:", e);
                reject(e);
            });
        });
    })
        .catch((e) => {
        console.error("Failed to run tests:", e);
        return 1;
    })
        .finally(() => {
        // TODO - integrate with codecov, then we no longer need to block on AWS_REGION
        if (process.env.CI && process.env.AWS_REGION) {
            const s3 = new client_s3_1.S3({});
            const report = fs_1.default.createReadStream("playwright-report/index.html");
            const reportData = fs_1.default.existsSync("playwright-report/data")
                ? fs_1.default.readdirSync("playwright-report/data")
                : [];
            const version = (0, toVersion_1.default)();
            const root = "extensions/tests";
            const Key = `${root}/${path}/${version}.html`;
            return Promise.all([
                s3.putObject({
                    Bucket: "samepage.network",
                    Key,
                    Body: report,
                    ContentType: "text/html",
                }),
            ].concat(reportData.map((r) => s3.putObject({
                Bucket: "samepage.network",
                Key: `${root}/${path}/data/${r}`,
                ContentType: mime_types_1.default.lookup(r) || undefined,
                Body: fs_1.default.createReadStream(`playwright-report/data/${r}`),
            }))))
                .then(() => console.log(`Latest test report can be found on: https://samepage.network/${Key}`))
                .catch((e) => console.log("Failed to upload test report", Key, e.message));
        }
        return Promise.resolve();
    });
};
exports.default = test;
//# sourceMappingURL=test.js.map