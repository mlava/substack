{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../package/scripts/cli.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport type { CliOpts } from \"./internal/compile\";\nimport build from \"./build\";\nimport dev from \"./dev\";\nimport test from \"./test\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst mergeOpts = (args: CliOpts, rawPath: string): CliOpts => {\n  const root = typeof args.root === \"string\" ? args.root : \".\";\n  const configPath = path.join(root, rawPath);\n  const rawConfigOpts = fs.existsSync(configPath)\n    ? JSON.parse(fs.readFileSync(configPath).toString()).samepage || {}\n    : {};\n  rawConfigOpts.root = rawConfigOpts.root || root;\n  const configOpts = rawConfigOpts.extends\n    ? mergeOpts(rawConfigOpts, rawConfigOpts.extends)\n    : rawConfigOpts;\n  const mergedOpts: CliOpts = { ...configOpts };\n  Object.keys(args).forEach((k) => {\n    const mergedOptValue = mergedOpts[k];\n    const argValue = args[k];\n    if (Array.isArray(mergedOptValue)) {\n      mergedOpts[k] = [\n        ...mergedOptValue,\n        ...(typeof argValue === \"string\"\n          ? [argValue]\n          : Array.isArray(argValue)\n          ? argValue\n          : [`${argValue}`]),\n      ];\n    } else {\n      mergedOpts[k] = argValue;\n    }\n  });\n  return mergedOpts;\n};\n\nconst run = async (command: string, args: string[]): Promise<number> => {\n  const cliOpts = args\n    .map(\n      (a, i) =>\n        [\n          a,\n          args[i + 1] && !args[i + 1].startsWith(\"--\") ? args[i + 1] : true,\n        ] as const\n    )\n    .filter(([k]) => k.startsWith(\"--\"))\n    .map(\n      ([k, v]) =>\n        [\n          k\n            .replace(/^--/, \"\")\n            .split(/-/g)\n            .map((s, i) =>\n              i === 0\n                ? s\n                : `${s.substring(0, 1).toUpperCase()}${s.substring(1)}`\n            )\n            .join(\"\"),\n          v,\n        ] as const\n    )\n    .reduce((prev, [k, v]) => {\n      const prevK = prev[k];\n      if (v === true) {\n        prev[k] = v;\n      } else if (prevK) {\n        if (typeof prevK === \"string\") {\n          prev[k] = [prevK, v];\n        } else if (prevK !== true) {\n          prev[k] = [...prevK, v];\n        }\n      } else {\n        prev[k] = v;\n      }\n      return prev;\n    }, {} as CliOpts);\n  const opts = mergeOpts(cliOpts, \"package.json\");\n  const interpolate = (s: string) =>\n    s.replace(/\\$([A-Z_]+)/g, (orig, k) => process.env[k] || orig);\n  Object.entries(opts).forEach(([k, v]) => {\n    if (typeof v === \"string\") {\n      opts[k] = interpolate(v);\n    } else if (Array.isArray(v)) {\n      opts[k] = v.map(interpolate);\n    }\n  });\n  switch (command) {\n    case \"build\":\n      return build(opts);\n    case \"start\":\n    case \"dev\":\n      return dev(opts);\n    case \"test\":\n      return test(opts);\n    default:\n      console.error(\"Command\", command, \"is unsupported\");\n      return 1;\n  }\n};\nrun(process.argv[2], process.argv.slice(3))\n  .then((code) => code >= 0 && process.exit(code))\n  .catch((err) => {\n    console.error(err);\n    process.exit(1);\n  });\n"]}