import esbuild from "esbuild";
import { z } from "zod";
declare global {
    namespace NodeJS {
        interface ProcessEnv {
            API_URL: string;
            AWS_ENDPOINT?: string;
            CLERK_PUBLISHABLE_KEY: string;
            GITHUB_TOKEN: string;
            NODE_ENV: "development" | "production" | "test";
            ORIGIN: string;
            STRIPE_PUBLIC_KEY: string;
            STRIPE_SECRET_KEY: string;
            PACKAGE_NAME: string;
            SVIX_SECRET: string;
        }
    }
}
export type CliOpts = Record<string, string | string[] | boolean>;
declare const cliArgs: z.ZodObject<{
    out: z.ZodOptional<z.ZodString>;
    root: z.ZodOptional<z.ZodString>;
    external: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    include: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    css: z.ZodOptional<z.ZodString>;
    format: z.ZodOptional<z.ZodEnum<["iife", "cjs", "esm"]>>;
    mirror: z.ZodOptional<z.ZodString>;
    analyze: z.ZodOptional<z.ZodBoolean>;
    max: z.ZodOptional<z.ZodString>;
    finish: z.ZodOptional<z.ZodString>;
    entry: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    extends: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    out?: string | undefined;
    root?: string | undefined;
    external?: string | string[] | undefined;
    include?: string | string[] | undefined;
    css?: string | undefined;
    format?: "iife" | "cjs" | "esm" | undefined;
    mirror?: string | undefined;
    analyze?: boolean | undefined;
    max?: string | undefined;
    finish?: string | undefined;
    entry?: string | string[] | undefined;
    extends?: string | undefined;
}, {
    out?: string | undefined;
    root?: string | undefined;
    external?: string | string[] | undefined;
    include?: string | string[] | undefined;
    css?: string | undefined;
    format?: "iife" | "cjs" | "esm" | undefined;
    mirror?: string | undefined;
    analyze?: boolean | undefined;
    max?: string | undefined;
    finish?: string | undefined;
    entry?: string | string[] | undefined;
    extends?: string | undefined;
}>;
export type CliArgs = z.infer<typeof cliArgs>;
type Builder = (opts: esbuild.BuildOptions) => Promise<void>;
declare const compile: ({ builder, opts, }: {
    opts: CliOpts;
    builder?: Builder | undefined;
}) => Promise<void[]>;
export default compile;
