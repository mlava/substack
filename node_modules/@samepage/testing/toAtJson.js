"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const registry_1 = require("../internal/registry");
const atJsonParser_1 = require("../utils/atJsonParser");
const toAtJson = (node) => {
    if (node.nodeType === node.TEXT_NODE) {
        return {
            content: node.nodeValue || "",
            annotations: [],
        };
    }
    else if (node.nodeType === node.ELEMENT_NODE) {
        const el = node;
        const schemas = Array.from(el.childNodes).map((c) => toAtJson(c));
        const childSchema = (0, atJsonParser_1.combineAtJsons)(schemas);
        if (el.tagName === "DIV") {
            return {
                content: `${childSchema.content}\n`,
                annotations: [
                    {
                        start: 0,
                        end: childSchema.content.length + 1,
                        type: "block",
                        attributes: {
                            viewType: "document",
                            level: 1,
                        },
                    },
                ].concat(childSchema.annotations),
            };
        }
        else if (el.tagName === "LI") {
            return {
                content: `${childSchema.content}\n`,
                annotations: [
                    {
                        start: 0,
                        end: childSchema.content.length + 1,
                        type: "block",
                        attributes: {
                            viewType: "bullet",
                            level: 1,
                        },
                    },
                ].concat(childSchema.annotations),
            };
        }
        else if (el.tagName === "SPAN") {
            const span = el;
            if (el.classList.contains("samepage-highlighting")) {
                return {
                    content: childSchema.content,
                    annotations: [
                        {
                            start: 0,
                            end: childSchema.content.length,
                            type: "highlighting",
                        },
                    ],
                };
            }
            else {
                return {
                    content: span.innerText || "",
                    annotations: [],
                };
            }
        }
        else if (el.tagName === "B") {
            return {
                content: childSchema.content,
                annotations: [
                    {
                        start: 0,
                        end: childSchema.content.length,
                        type: "bold",
                    },
                ],
            };
        }
        else if (el.tagName === "I") {
            return {
                content: childSchema.content,
                annotations: [
                    {
                        start: 0,
                        end: childSchema.content.length,
                        type: "italics",
                    },
                ],
            };
        }
        else if (el.tagName === "IMG") {
            const img = el;
            const content = img.alt || String.fromCharCode(0);
            return {
                content,
                annotations: [
                    {
                        start: 0,
                        end: content.length,
                        type: "image",
                        attributes: {
                            src: img.src,
                        },
                    },
                ],
            };
        }
        else if (el.tagName === "A") {
            const a = el;
            if (el.classList.contains("samepage-reference")) {
                const parts = a.title.split(":");
                const notebookUuid = parts.length === 1 ? (0, registry_1.getSetting)("uuid") : parts[0];
                const notebookPageId = parts.length === 1 ? parts[0] : parts[1];
                const content = el.classList.contains("samepage-alias")
                    ? childSchema.content.replace(/^\(\(/, "").replace(/\)\)$/, "")
                    : atJsonParser_1.NULL_TOKEN;
                return {
                    content,
                    annotations: [
                        {
                            start: 0,
                            end: content.length,
                            type: "reference",
                            attributes: {
                                notebookPageId,
                                notebookUuid,
                            },
                        },
                    ],
                };
            }
            else {
                return {
                    content: childSchema.content,
                    annotations: [
                        {
                            start: 0,
                            end: childSchema.content.length,
                            type: "link",
                            attributes: {
                                href: a.href,
                            },
                        },
                    ],
                };
            }
        }
        else if (el.tagName === "BODY") {
            return childSchema;
        }
        else {
            return {
                content: el.innerHTML || "",
                annotations: [],
            };
        }
    }
    else if (node.nodeType === node.COMMENT_NODE) {
        return {
            content: node.nodeValue || "",
            annotations: [],
        };
    }
    else {
        return {
            content: node.nodeValue || "",
            annotations: [],
        };
    }
};
exports.default = toAtJson;
//# sourceMappingURL=toAtJson.js.map