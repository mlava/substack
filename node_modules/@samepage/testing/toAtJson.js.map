{"version":3,"file":"toAtJson.js","sourceRoot":"","sources":["../../package/testing/toAtJson.ts"],"names":[],"mappings":"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","sourcesContent":["import { getSetting } from \"../internal/registry\";\nimport type { Annotation, InitialSchema } from \"../internal/types\";\nimport { combineAtJsons, NULL_TOKEN } from \"../utils/atJsonParser\";\n\nconst toAtJson = (node: ChildNode): InitialSchema => {\n  if (node.nodeType === node.TEXT_NODE) {\n    return {\n      content: node.nodeValue || \"\",\n      annotations: [],\n    };\n  } else if (node.nodeType === node.ELEMENT_NODE) {\n    const el = node as Element;\n    const schemas = Array.from(el.childNodes).map((c) => toAtJson(c));\n    const childSchema = combineAtJsons(schemas);\n    if (el.tagName === \"DIV\") {\n      return {\n        content: `${childSchema.content}\\n`,\n        annotations: [\n          {\n            start: 0,\n            end: childSchema.content.length + 1,\n            type: \"block\",\n            attributes: {\n              viewType: \"document\",\n              level: 1,\n            },\n          } as Annotation,\n        ].concat(childSchema.annotations),\n      };\n    } else if (el.tagName === \"LI\") {\n      return {\n        content: `${childSchema.content}\\n`,\n        annotations: [\n          {\n            start: 0,\n            end: childSchema.content.length + 1,\n            type: \"block\",\n            attributes: {\n              viewType: \"bullet\",\n              level: 1,\n            },\n          } as Annotation,\n        ].concat(childSchema.annotations),\n      };\n    } else if (el.tagName === \"SPAN\") {\n      const span = el as HTMLSpanElement;\n      if (el.classList.contains(\"samepage-highlighting\")) {\n        return {\n          content: childSchema.content,\n          annotations: [\n            {\n              start: 0,\n              end: childSchema.content.length,\n              type: \"highlighting\",\n            },\n          ],\n        };\n      } else {\n        return {\n          content: span.innerText || \"\",\n          annotations: [],\n        };\n      }\n    } else if (el.tagName === \"B\") {\n      return {\n        content: childSchema.content,\n        annotations: [\n          {\n            start: 0,\n            end: childSchema.content.length,\n            type: \"bold\",\n          },\n        ],\n      };\n    } else if (el.tagName === \"I\") {\n      return {\n        content: childSchema.content,\n        annotations: [\n          {\n            start: 0,\n            end: childSchema.content.length,\n            type: \"italics\",\n          },\n        ],\n      };\n    } else if (el.tagName === \"IMG\") {\n      const img = el as HTMLImageElement;\n      const content = img.alt || String.fromCharCode(0);\n      return {\n        content,\n        annotations: [\n          {\n            start: 0,\n            end: content.length,\n            type: \"image\",\n            attributes: {\n              src: img.src,\n            },\n          },\n        ],\n      };\n    } else if (el.tagName === \"A\") {\n      const a = el as HTMLAnchorElement;\n      if (el.classList.contains(\"samepage-reference\")) {\n        const parts = a.title.split(\":\");\n        const notebookUuid = parts.length === 1 ? getSetting(\"uuid\") : parts[0];\n        const notebookPageId = parts.length === 1 ? parts[0] : parts[1];\n        const content = el.classList.contains(\"samepage-alias\")\n          ? childSchema.content.replace(/^\\(\\(/, \"\").replace(/\\)\\)$/, \"\")\n          : NULL_TOKEN;\n        return {\n          content,\n          annotations: [\n            {\n              start: 0,\n              end: content.length,\n              type: \"reference\",\n              attributes: {\n                notebookPageId,\n                notebookUuid,\n              },\n            },\n          ],\n        };\n      } else {\n        return {\n          content: childSchema.content,\n          annotations: [\n            {\n              start: 0,\n              end: childSchema.content.length,\n              type: \"link\",\n              attributes: {\n                href: a.href,\n              },\n            },\n          ],\n        };\n      }\n    } else if (el.tagName === \"BODY\") {\n      return childSchema;\n    } else {\n      return {\n        content: el.innerHTML || \"\",\n        annotations: [],\n      };\n    }\n  } else if (node.nodeType === node.COMMENT_NODE) {\n    return {\n      content: node.nodeValue || \"\",\n      annotations: [],\n    };\n  } else {\n    return {\n      content: node.nodeValue || \"\",\n      annotations: [],\n    };\n  }\n};\n\nexport default toAtJson;\n"]}